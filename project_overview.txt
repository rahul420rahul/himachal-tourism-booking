PROJECT STRUCTURE OVERVIEW
==========================

DIRECTORY STRUCTURE:
.
├── api.v1.bookings.destroy,
├── api.v1.bookings.index,
├── api.v1.bookings.show,
├── api.v1.bookings.store,
├── api.v1.bookings.update,
├── app
│   ├── Console
│   │   └── Commands
│   ├── Contracts
│   │   └── RepositoryInterface.php
│   ├── Exceptions
│   │   ├── BookingException.php
│   │   └── Handler.php
│   ├── Filament
│   │   ├── Admin
│   │   ├── Pages
│   │   └── Widgets
│   ├── Http
│   │   ├── Controllers
│   │   ├── Kernel.php
│   │   ├── Kernel.php.backup
│   │   ├── Middleware
│   │   ├── Requests
│   │   └── Resources
│   ├── Interfaces
│   ├── Jobs
│   │   ├── GenerateInvoicePDF.php
│   │   ├── ProcessPaymentWebhook.php
│   │   ├── ProcessRecurringBilling.php
│   │   └── SendBookingConfirmation.php
│   ├── Mail
│   │   └── BookingConfirmation.php
│   ├── Models
│   │   ├── Achievement.php
│   │   ├── BlogPost.php
│   │   ├── Booking.php
│   │   ├── Booking.php.backup
│   │   ├── Booking.php.backup2
│   │   ├── Certificate.php
│   │   ├── ContactInquiry.php
│   │   ├── FlightLog.php
│   │   ├── GalleryMemory.php
│   │   ├── Gallery.php
│   │   ├── InvoiceItem.php
│   │   ├── Invoice.php
│   │   ├── Package.php
│   │   ├── Package.php.backup
│   │   ├── Payment.php
│   │   ├── Review.php
│   │   ├── Reward.php
│   │   ├── Service.php
│   │   ├── Testimonial.php
│   │   ├── TimeSlotBooking.php
│   │   ├── UserGallery.php
│   │   ├── User.php
│   │   ├── UserReward.php
│   │   └── UserStatistics.php
│   ├── Notifications
│   │   └── BookingStatusChanged.php
│   ├── Policies
│   │   ├── AchievementPolicy.php
│   │   ├── BookingPolicy.php
│   │   ├── CertificatePolicy.php
│   │   ├── FlightLogPolicy.php
│   │   └── UserGalleryPolicy.php
│   ├── Providers
│   │   ├── AppServiceProvider.php
│   │   ├── AuthServiceProvider.php
│   │   ├── Filament
│   │   ├── RepositoryServiceProvider.php
│   │   ├── RouteServiceProvider.php
│   │   └── TelescopeServiceProvider.php
│   ├── Repositories
│   │   ├── BookingRepository.php
│   │   └── Eloquent
│   ├── Services
│   │   ├── BookingService.php
│   │   ├── RazorpayService.php
│   │   ├── WeatherService.php
│   │   └── WhatsAppService.php
│   └── View
│       └── Components
├── AppProvidersFilamentAdminPanelProvider.php
├── artisan
├── backups
│   ├── db_20250831_124434.sqlite
│   ├── files_20250831_123956.tar.gz
│   └── files_20250831_124434.tar.gz
├── backup.sh
├── bootstrap
│   ├── app.php
│   ├── cache
│   │   ├── blade-icons.php
│   │   ├── events.php
│   │   ├── filament
│   │   ├── packages.php
│   │   └── services.php
│   └── providers.php
├── check_performance.php
├── composer.json
├── composer.lock
├── config
│   ├── app.php
│   ├── auth.php
│   ├── cache.php
│   ├── database.php
│   ├── filament.php
│   ├── filesystems.php
│   ├── image-optimizer.php
│   ├── l5-swagger.php
│   ├── logging.php
│   ├── mail.php
│   ├── permission.php
│   ├── queue.php
│   ├── sanctum.php
│   ├── services.php
│   ├── services.php.backup
│   ├── services.php.broken
│   ├── session.php
│   └── telescope.php
├── current_header.txt
├── database
│   ├── backup_20250822.sqlite
│   ├── database.sqlite
│   ├── database.sqlite.backup.20250825_114216
│   ├── factories
│   │   ├── AchievementFactory.php
│   │   ├── BookingFactory.php
│   │   ├── CertificateFactory.php
│   │   ├── FlightLogFactory.php
│   │   ├── PackageFactory.php
│   │   ├── UserFactory.php
│   │   └── UserGalleryFactory.php
│   ├── migrations
│   │   ├── 2025_08_22_041932_create_complete_database_structure.php
│   │   ├── 2025_08_22_135248_add_role_to_users_table.php
│   │   ├── 2025_08_22_155321_make_bookings_fields_nullable.php
│   │   ├── 2025_08_22_181646_add_razorpay_order_id_to_bookings_table.php
│   │   ├── 2025_08_22_182653_create_telescope_entries_table.php
│   │   ├── 2025_08_22_183421_create_payments_table.php
│   │   ├── 2025_08_23_045631_create_services_table.php
│   │   ├── 2025_08_23_055825_add_missing_columns_to_packages.php
│   │   ├── 2025_08_23_055901_add_missing_columns_to_packages.php
│   │   ├── 2025_08_23_060123_add_missing_columns_to_packages.php
│   │   ├── 2025_08_23_123428_fix_bookings_table_structure.php
│   │   ├── 2025_08_23_144750_add_razorpay_payment_fields_to_bookings_table.php
│   │   ├── 2025_08_23_155434_add_guest_fields_to_bookings_table.php
│   │   ├── 2025_08_23_161755_add_balance_payment_fields_to_bookings_table.php
│   │   ├── 2025_08_23_200309_add_missing_columns_to_packages_table.php
│   │   ├── 2025_08_24_164930_create_user_certificates_table.php
│   │   ├── 2025_08_24_164931_create_user_achievements_table.php
│   │   ├── 2025_08_24_164931_create_user_gallery_table.php
│   │   ├── 2025_08_24_164932_create_flight_logs_table.php
│   │   ├── 2025_08_24_164935_create_user_statistics_table.php
│   │   ├── 2025_08_24_170000_create_user_statistics_table.php
│   │   ├── 2025_08_24_180000_create_certificates_table.php
│   │   ├── 2025_08_24_180001_create_achievements_table.php
│   │   ├── 2025_08_24_180002_create_user_achievements_table.php
│   │   ├── 2025_08_25_055003_add_gallery_columns.php
│   │   ├── 2025_08_25_055625_update_galleries_table_columns.php
│   │   ├── 2025_08_25_081948_add_missing_booking_columns.php
│   │   ├── 2025_08_25_081954_add_missing_booking_columns.php
│   │   ├── 2025_08_25_191621_add_image_url_to_packages_table.php
│   │   └── 2025_08_26_*_add_image_url_to_packages_table.php
│   ├── seeders
│   │   ├── AchievementSeeder.php
│   │   ├── AdminUserSeeder.php
│   │   ├── CertificateSeeder.php
│   │   ├── CreateAdminUserSeeder.php
│   │   ├── DatabaseSeeder.php
│   │   ├── FlightLogSeeder.php
│   │   ├── GallerySeeder.php
│   │   ├── PackageSeeder.php
│   │   ├── PackageSeeder.php.backup
│   │   ├── PackageSeeder.php.complex
│   │   ├── RealPackagesSeeder.php
│   │   ├── SampleDataSeeder.php
│   │   ├── SampleDataSeeder.php.backup
│   │   ├── SampleDataSeeder.php.old
│   │   ├── TestimonialSeeder.php
│   │   ├── UpdatedPackageSeeder.php
│   │   ├── UpdatePackageAdvancePayment.php
│   │   ├── UserGallerySeeder.php
│   │   └── UserSeeder.php
│   └── testing.sqlite
├── fix-project.sh
├── fix-routes.php
├── lang
├── package.json
├── package-lock.json
├── phpunit.xml
├── phpunit.xml.bak
├── postcss.config.js
├── production_optimize.sh
├── project_analysis.txt
├── project_overview.txt
├── public
│   ├── assets
│   │   ├── images
│   │   └── logos
│   ├── build
│   │   ├── assets
│   │   └── manifest.json
│   ├── css
│   │   └── filament
│   ├── favicon.ico
│   ├── hot
│   ├── images
│   │   ├── logos
│   │   └── packages
│   ├── index.php
│   ├── js
│   │   └── filament
│   ├── robots.txt
│   ├── sitemap.xml
│   └── test-react.html
├── README.md
├── required|date|after:today,
├── required|exists:packages,id,
├── resources
│   ├── css
│   │   ├── app.css
│   │   ├── app.css.backup
│   │   ├── mobile.css
│   │   └── mobile-fixes.css
│   ├── js
│   │   ├── app.js
│   │   ├── app.js.backup
│   │   ├── app.js.react-backup-20250826_123843
│   │   ├── booking-app.js
│   │   ├── booking-modal.jsx
│   │   ├── bootstrap.js
│   │   ├── components
│   │   ├── hooks
│   │   ├── notification-fix.js
│   │   ├── react
│   │   ├── react-app.js
│   │   ├── react-app.jsx
│   │   ├── react-booking.js
│   │   ├── react-booking.jsx
│   │   ├── react-booking.jsx.backup_20250826_121408
│   │   ├── react-booking.jsx.backup-20250826_123843
│   │   ├── react-booking-main.jsx
│   │   ├── react-booking-simple.jsx
│   │   ├── react-simple.jsx
│   │   ├── services
│   │   ├── test-react.jsx
│   │   └── utils
│   └── views
│       ├── about.blade.php
│       ├── admin
│       ├── auth
│       ├── booking
│       ├── bookings
│       ├── booking-success.blade.php
│       ├── certificates
│       ├── components
│       ├── contact.blade.php
│       ├── dashboard
│       ├── dashboard.blade.php
│       ├── dashboard.blade.php.bak
│       ├── emails
│       ├── errors
│       ├── gallery
│       ├── gallery.blade.php
│       ├── home.blade.php
│       ├── invoices
│       ├── layouts
│       ├── packages
│       ├── pages
│       ├── partials
│       ├── profile
│       ├── react-booking.blade.php
│       ├── react-booking.blade.php.backup
│       ├── react-booking.blade.php.backup_20250826_121408
│       ├── react-booking-fix.blade.php
│       ├── react-booking.php
│       ├── react-packages.blade.php
│       ├── rewards
│       ├── services.blade.php
│       ├── test.blade.php
│       ├── test-menu.blade.php
│       ├── test-mobile.blade.php
│       ├── test-react.blade.php
│       └── welcome.blade.php
├── routes
│   ├── api_booking.php
│   ├── api.php
│   ├── api.php'
│   ├── api.php.backup
│   ├── auth.php
│   ├── console.php
│   ├── web_booking_routes.php
│   ├── web.php
│   ├── web.php.backup
│   ├── web.php.backup_20250826_121408
│   ├── web.php.bak
│   ├── web.php.broken
│   └── web_react_booking.php
├── stubs
│   └── filament
│       ├── Cluster.stub
│       ├── CustomResourcePage.stub
│       ├── Page.stub
│       ├── PageView.stub
│       ├── RelationManager.stub
│       ├── ResourceEditPage.stub
│       ├── ResourceListPage.stub
│       ├── ResourceManagePage.stub
│       ├── ResourceManageRelatedRecordsPage.stub
│       ├── ResourcePage.stub
│       ├── Resource.stub
│       ├── ResourceViewPage.stub
│       ├── ThemeCss.stub
│       ├── ThemeCssTailwind4.stub
│       ├── ThemePostcssConfig.stub
│       └── ThemeTailwindConfig.stub
├── tailwind.config.js
├── tests
│   ├── Feature
│   │   ├── Api
│   │   ├── Auth
│   │   ├── BookingControllerTest.php
│   │   ├── BookingTest.php
│   │   ├── ExampleTest.php
│   │   ├── PaymentControllerTest.php
│   │   └── ProfileTest.php
│   ├── TestCase.php
│   └── Unit
│       ├── ExampleTest.php
│       └── PaymentTest.php
├── vite.config.js
└── webpack.mix.js

85 directories, 249 files

ROUTES:
<?php

use App\Http\Controllers\HomeController;
use App\Http\Controllers\PackageController;
use App\Http\Controllers\BookingController;
use App\Http\Controllers\PaymentController;
use App\Http\Controllers\WeatherController;
use App\Http\Controllers\ContactController;
use App\Http\Controllers\AboutController;
use App\Http\Controllers\ServiceController;
use App\Http\Controllers\InvoiceController;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\GalleryController;
use App\Http\Controllers\PageController;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\CertificateController;
use App\Http\Controllers\BookingSuccessController;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;

// Root route - home page
Route::get('/', [HomeController::class, 'index'])->name('home');

// Public Package routes
Route::get('/packages', [PackageController::class, 'index'])->name('packages.index');
Route::get('/packages/{package}', [PackageController::class, 'show'])->name('packages.show');

// Weather routes
Route::get('/weather/{city?}', [WeatherController::class, 'getCurrentWeather'])->name('weather.current');
Route::get('/forecast/{city?}', [WeatherController::class, 'getForecast'])->name('weather.forecast');

// PUBLIC BOOKING ROUTES - MUST BE OUTSIDE AUTH MIDDLEWARE
Route::post('/bookings', [BookingController::class, 'store'])->name('bookings.store');
Route::get('/bookings/{id}/guest', [BookingController::class, 'guestShow'])->name('bookings.guest');
Route::get('/bookings/create', [BookingController::class, 'create'])->name('bookings.create');

// React Booking Route - Single definition
Route::get('/booking/{package_id}', function ($package_id) {
    return view('booking.react', ['package_id' => $package_id]);
})->name('booking.show');

// Booking success page - Single definition
Route::get('/booking-success/{id}', [BookingSuccessController::class, 'show'])->name('booking.success');

// REACT BOOKING ROUTE - PROPERLY CONFIGURED
Route::get('/booking-new/{id?}', function ($id = null) {
    $packages = \App\Models\Package::where('is_active', true)->get();
    $selectedPackage = null;
    
    if ($id) {
        $selectedPackage = \App\Models\Package::find($id);
        if (!$selectedPackage) {
            abort(404, 'Package not found');
        }
    }
    
    return view('react-booking', [
        'packages' => $packages,
        'selectedPackage' => $selectedPackage
    ]);
})->name('booking.react');

// Payment routes (accessible to guests)
Route::post('/payments/create-order', [PaymentController::class, 'createOrder'])->name('payments.create-order');
Route::post('/payments/callback', [PaymentController::class, 'handleCallback'])->name('payments.callback');
Route::post('/payments/verify', [PaymentController::class, 'verifyPayment'])->name('payments.verify');
Route::post('/verify-payment', [PaymentController::class, 'verifyPayment'])->name('verify.payment');
Route::post('/payments/failure', [PaymentController::class, 'handleFailure'])->name('payments.failure');

// Contact routes
Route::get('/contact', [ContactController::class, 'index'])->name('contact');
Route::post('/contact', [ContactController::class, 'store'])->name('contact.store');

// About and Services routes
Route::get('/about', [AboutController::class, 'index'])->name('about');
Route::get('/services', [ServiceController::class, 'index'])->name('services');

// Service specific pages
Route::prefix('services')->name('services.')->group(function () {
    Route::get('/tandem-flights', [ServiceController::class, 'tandem'])->name('tandem');
    Route::get('/training-courses', [ServiceController::class, 'training'])->name('training');
    Route::get('/equipment-rental', [ServiceController::class, 'rental'])->name('rental');
    Route::get('/photography', [ServiceController::class, 'photography'])->name('photography');
});

// Gallery
Route::get('/gallery', [GalleryController::class, 'index'])->name('gallery');

// Static pages
Route::get('/safety', [PageController::class, 'safety'])->name('safety');
Route::get('/privacy-policy', [PageController::class, 'privacy'])->name('privacy');
Route::get('/terms-conditions', [PageController::class, 'terms'])->name('terms');
Route::get('/refund-policy', [PageController::class, 'refund'])->name('refund');

// PUBLIC API Routes (NO AUTH REQUIRED)
Route::prefix('api')->group(function () {
    Route::get('/packages/search', [PackageController::class, 'search'])->name('api.packages.search');
    Route::get('/packages', [\App\Http\Controllers\Api\ReactBookingController::class, 'getPackages'] ?? [PackageController::class, 'index']);
    Route::get('/time-slots', [BookingController::class, 'getAvailableTimeSlots'])->name('api.time-slots');
    Route::get('/weather-check', [BookingController::class, 'checkWeather'])->name('api.weather-check');
    
    // Booking API routes
    Route::post('/bookings', [\App\Http\Controllers\Api\BookingController::class, 'store']);
    Route::get('/my-bookings', [\App\Http\Controllers\Api\BookingController::class, 'getMyBookings']);
});

// CORS preflight requests for payment routes
Route::options('/payments/{any}', function () {
    return response()->json([], 200, [
        'Access-Control-Allow-Origin' => '*',
        'Access-Control-Allow-Methods' => 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers' => 'Origin, Content-Type, Accept, Authorization, X-Request-With',
        'Access-Control-Max-Age' => 3600,
    ]);
})->where('any', '.*');

// Protected routes (require authentication)
Route::middleware('auth')->group(function () {
    // Complete payment routes
    Route::post('/bookings/{booking}/complete-payment', [PaymentController::class, 'createPaymentOrder'])->name('bookings.complete-payment');
    Route::post('/bookings/{booking}/verify-payment', [PaymentController::class, 'verifyPayment'])->name('bookings.verify-payment');
    
    // Main Dashboard Route
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
    
    // Dashboard Sub-routes
    Route::prefix('dashboard')->name('dashboard.')->group(function () {
        Route::get('/certificates', [DashboardController::class, 'certificates'])->name('certificates');
        Route::get('/certificates/{certificate}/download', [DashboardController::class, 'downloadCertificate'])->name('certificate.download');
        Route::get('/gallery', [DashboardController::class, 'gallery'])->name('gallery');
        Route::post('/gallery/upload', [DashboardController::class, 'uploadToGallery'])->name('gallery.upload');
        Route::delete('/gallery/{gallery}', [DashboardController::class, 'deleteGalleryItem'])->name('gallery.delete');
        Route::get('/achievements', [DashboardController::class, 'achievements'])->name('achievements');
        Route::get('/statistics', [DashboardController::class, 'statistics'])->name('statistics');
        
        // Flight Log CRUD Routes
        Route::get('/flight-logs', [DashboardController::class, 'flightLogs'])->name('flight-logs');
        Route::get('/flight-logs/create', [DashboardController::class, 'createFlightLog'])->name('flight-logs.create');
        Route::post('/flight-logs', [DashboardController::class, 'storeFlightLog'])->name('flight-logs.store');
        Route::get('/flight-logs/{flightLog}/edit', [DashboardController::class, 'editFlightLog'])->name('flight-logs.edit');
        Route::put('/flight-logs/{flightLog}', [DashboardController::class, 'updateFlightLog'])->name('flight-logs.update');
        Route::delete('/flight-logs/{flightLog}', [DashboardController::class, 'destroyFlightLog'])->name('flight-logs.destroy');
    });
    
    // Profile routes
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
    Route::get('/settings', [ProfileController::class, 'settings'])->name('settings');
    
    // Authenticated Booking routes
    Route::get('/bookings/{booking}', [BookingController::class, 'show'])->name('bookings.show');
    Route::patch('/bookings/{booking}', [BookingController::class, 'update'])->name('bookings.update');
    Route::delete('/bookings/{booking}', [BookingController::class, 'destroy'])->name('bookings.destroy');
    
    // Invoice Management Routes
    Route::resource('invoices', InvoiceController::class);
    Route::get('invoices/{invoice}/pdf', [InvoiceController::class, 'downloadPdf'])->name('invoices.pdf');
    Route::post('invoices/{invoice}/send', [BookingController::class, 'sendEmail'])->name('invoices.send');
    Route::post('invoices/{invoice}/pay', [InvoiceController::class, 'markAsPaid'])->name('invoices.pay');
    Route::post('invoices/{invoice}/duplicate', [InvoiceController::class, 'duplicate'])->name('invoices.duplicate');
    
    // AUTHENTICATED API Routes
    Route::prefix('api')->group(function () {
        Route::get('/customers/search', [BookingController::class, 'searchCustomers'])->name('api.customers.search');
        Route::get('/bookings/calendar', [BookingController::class, 'calendarData'])->name('api.bookings.calendar');
        Route::get('/invoices/stats', [InvoiceController::class, 'getStats'])->name('api.invoices.stats');
    });
    
    // Admin/Manager only routes
    Route::middleware(['can:manage-system'])->group(function () {
        // Package Management
        Route::post('/packages', [PackageController::class, 'store'])->name('packages.store');
        Route::get('/packages/create', [PackageController::class, 'create'])->name('packages.create');
        Route::get('/packages/{package}/edit', [PackageController::class, 'edit'])->name('packages.edit');
        Route::patch('/packages/{package}', [PackageController::class, 'update'])->name('packages.update');
        Route::delete('/packages/{package}', [PackageController::class, 'destroy'])->name('packages.destroy');
        
        // Payment Management
        Route::get('/manage/payments', [PaymentController::class, 'index'])->name('admin.payments.index');
        Route::get('/manage/payments/{payment}', [PaymentController::class, 'show'])->name('admin.payments.show');
        
        // Contact Management
        Route::get('/manage/contacts', [ContactController::class, 'adminIndex'])->name('admin.contacts.index');
        Route::get('/manage/contacts/{contact}', [ContactController::class, 'adminShow'])->name('admin.contacts.show');
        Route::patch('/manage/contacts/{contact}', [ContactController::class, 'markAsRead'])->name('admin.contacts.read');
        Route::delete('/manage/contacts/{contact}', [ContactController::class, 'destroy'])->name('admin.contacts.destroy');
        
        // Service Management
        Route::post('/services', [ServiceController::class, 'store'])->name('services.store');
        Route::get('/services/create', [ServiceController::class, 'create'])->name('services.create');
        Route::get('/services/{service}/edit', [ServiceController::class, 'edit'])->name('services.edit');
        Route::patch('/services/{service}', [ServiceController::class, 'update'])->name('services.update');
        Route::delete('/services/{service}', [ServiceController::class, 'destroy'])->name('services.destroy');
        
        // Gallery Management
        Route::post('/gallery', [GalleryController::class, 'store'])->name('gallery.store');
        Route::get('/gallery/create', [GalleryController::class, 'create'])->name('gallery.create');
        Route::get('/gallery/{gallery}/edit', [GalleryController::class, 'edit'])->name('gallery.edit');
        Route::patch('/gallery/{gallery}', [GalleryController::class, 'update'])->name('gallery.update');
        Route::delete('/gallery/{gallery}', [GalleryController::class, 'destroy'])->name('gallery.destroy');
        
        // Reports and Analytics
        Route::get('/manage/reports', function () {
            return view('admin.reports.index');
        })->name('admin.reports');
        
        Route::get('/manage/analytics', function () {
            return view('admin.analytics.index');
        })->name('admin.analytics');
        
        Route::get('/manage/settings', function () {
            return view('admin.settings.index');
        })->name('admin.settings');
    });
});

// My Bookings (authenticated)
Route::get('/my-bookings', function() { 
    return view('bookings.my-bookings'); 
})->name('bookings.my')->middleware('auth');

// Guest Invoice View (Public access with token)
Route::get('/invoices/{invoice}/view/{token}', [InvoiceController::class, 'publicView'])->name('invoices.public');
Route::get('/invoices/{invoice}/download/{token}', [InvoiceController::class, 'publicDownload'])->name('invoices.public.download');

// Certificate Verification Route (Public)
Route::get('/certificate/verify/{certificate_number}', [CertificateController::class, 'verify'])->name('certificate.verify');

// Health Check Route
Route::get('/health', function () {
    return response()->json([
        'status' => 'OK',
        'timestamp' => now(),
        'app' => config('app.name'),
        'version' => '1.0.0',
        'cache' => Cache::has('health_check'),
        'database' => DB::connection()->getPdo() ? true : false,
    ]);
})->name('health');

// Maintenance Mode Check
Route::get('/maintenance', function () {
    return view('errors.503');
})->name('maintenance');

// Rewards routes
Route::get('/rewards', function () {
    return view('rewards.index');
})->name('rewards');

// Test routes
Route::get('/test', function() { return view('test'); });
Route::get('/test123', function() { return 'Test route works!'; });
Route::get('/test-react', fn() => view('test-react'));
Route::get('/packages-react', fn() => view('react-packages'))->name('packages.react');

// Fallback route for 404
Route::fallback(function () {
    return view('errors.404');
});

// Auth routes
require __DIR__.'/auth.php';

// Include other route files if they exist
if (file_exists(__DIR__.'/web_react_booking.php')) {
    require __DIR__.'/web_react_booking.php';
}
DASHBOARD CONTROLLER (if exists):
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Certificate;
use App\Models\FlightLog;
use App\Models\Achievement;
use App\Models\Gallery;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Carbon\Carbon;

class DashboardController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        
        // Get statistics
        $stats = (object)[
            'total_flights' => FlightLog::where('user_id', $user->id)->count(),
            'total_flight_hours' => FlightLog::where('user_id', $user->id)->sum('flight_duration') / 60,
        ];
        
        // Get recent data
        $certificates = Certificate::where('user_id', $user->id)->latest()->get();
        $recentFlightLogs = FlightLog::where('user_id', $user->id)->latest()->take(5)->get();
        $recentAchievements = Achievement::where('user_id', $user->id)->latest()->take(5)->get();
        
        return view('dashboard', compact('stats', 'certificates', 'recentFlightLogs', 'recentAchievements'));
    }
    
    public function certificates()
    {
        $certificates = Certificate::where('user_id', Auth::id())->get();
        return view('dashboard.certificates', compact('certificates'));
    }
    
    public function downloadCertificate(Certificate $certificate)
    {
        // Implement certificate download logic
        return response()->download(storage_path('app/public/' . $certificate->file_path));
    }
    
    public function gallery()
    {
        return view('dashboard.gallery');
    }
    
    public function uploadToGallery(Request $request)
    {
        $request->validate([
            'title' => 'nullable|string|max:255',
            'file' => 'required|file|mimes:jpg,jpeg,png,gif,mp4,avi,mov|max:51200' // 50MB max
        ]);
        
        $file = $request->file('file');
        $filePath = $file->store('gallery', 'public');
        
        // Determine if it's a photo or video
        $type = in_array($file->getClientOriginalExtension(), ['mp4', 'avi', 'mov']) ? 'video' : 'photo';
        
        Gallery::create([
            'user_id' => Auth::id(),
            'title' => $request->title ?? 'Untitled',
            'file_path' => $filePath,
            'type' => $type,
        ]);
        
        return redirect()->route('dashboard.gallery')->with('success', 'File uploaded successfully!');
    }
    
    public function flightLogs()
    {
        $flightLogs = FlightLog::where('user_id', Auth::id())
            ->orderBy('date', 'desc')
            ->paginate(10);
        
        return view('dashboard.flight-logs', compact('flightLogs'));
    }
    
    public function achievements()
    {
        $achievements = Achievement::where('user_id', Auth::id())->get();
        return view('dashboard.achievements', compact('achievements'));
    }
    
    public function statistics()
    {
        $stats = (object)[
            'total_flights' => FlightLog::where('user_id', Auth::id())->count(),
            'total_hours' => FlightLog::where('user_id', Auth::id())->sum('flight_duration') / 60,
            'max_altitude' => FlightLog::where('user_id', Auth::id())->max('max_altitude'),
            'total_distance' => FlightLog::where('user_id', Auth::id())->sum('distance'),
        ];
        
        return view('dashboard.statistics', compact('stats'));
    }
    
    // Flight Log CRUD Methods
    public function createFlightLog()
    {
        return view('dashboard.flight-logs-create');
    }
    
    public function storeFlightLog(Request $request)
    {
        $request->validate([
            'date' => 'required|date',
            'site_name' => 'required|string|max:255',
            'launch_time' => 'required',
            'landing_time' => 'required',
            'max_altitude' => 'nullable|numeric',
            'distance' => 'nullable|numeric',
            'glider_model' => 'nullable|string|max:255',
            'weather_conditions' => 'nullable|string',
            'wind_speed' => 'nullable|string|max:50',
            'wind_direction' => 'nullable|string|max:10',
            'notes' => 'nullable|string',
            'track_file' => 'nullable|file|mimes:gpx,igc,kml|max:10240',
            'photos.*' => 'nullable|image|max:5120'
        ]);
        
        // Calculate flight duration
        $launchTime = Carbon::parse($request->date . ' ' . $request->launch_time);
        $landingTime = Carbon::parse($request->date . ' ' . $request->landing_time);
        $duration = $launchTime->diffInMinutes($landingTime);
        
        // Handle file uploads
        $trackFilePath = null;
        if ($request->hasFile('track_file')) {
            $trackFilePath = $request->file('track_file')->store('flight-tracks', 'public');
        }
        
        $photos = [];
        if ($request->hasFile('photos')) {
            foreach ($request->file('photos') as $photo) {
                $photos[] = $photo->store('flight-photos', 'public');
            }
        }
        
        // Create flight log
        $flightLog = FlightLog::create([
            'user_id' => Auth::id(),
            'date' => $launchTime,
            'site_name' => $request->site_name,
            'launch_time' => $launchTime,
            'landing_time' => $landingTime,
            'flight_duration' => $duration,
            'max_altitude' => $request->max_altitude,
            'distance' => $request->distance,
            'glider_model' => $request->glider_model,
            'weather_conditions' => $request->weather_conditions,
            'wind_speed' => $request->wind_speed,
            'wind_direction' => $request->wind_direction,
            'notes' => $request->notes,
            'track_file' => $trackFilePath,
            'photos' => json_encode($photos),
            'is_verified' => false
        ]);
        
        return redirect()->route('dashboard.flight-logs')->with('success', 'Flight log added successfully!');
    }
    
    public function editFlightLog(FlightLog $flightLog)
    {
        // Check if user owns this flight log
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }
        
        return view('dashboard.flight-logs-edit', compact('flightLog'));
    }
    
    public function updateFlightLog(Request $request, FlightLog $flightLog)
    {
        // Check if user owns this flight log
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }
        
        $request->validate([
            'date' => 'required|date',
            'site_name' => 'required|string|max:255',
            'launch_time' => 'required',
            'landing_time' => 'required',
            'max_altitude' => 'nullable|numeric',
            'distance' => 'nullable|numeric',
        ]);
        
        // Calculate flight duration
        $launchTime = Carbon::parse($request->date . ' ' . $request->launch_time);
        $landingTime = Carbon::parse($request->date . ' ' . $request->landing_time);
        $duration = $launchTime->diffInMinutes($landingTime);
        
        $flightLog->update([
            'date' => $launchTime,
            'site_name' => $request->site_name,
            'launch_time' => $launchTime,
            'landing_time' => $landingTime,
            'flight_duration' => $duration,
            'max_altitude' => $request->max_altitude,
            'distance' => $request->distance,
            'glider_model' => $request->glider_model,
            'weather_conditions' => $request->weather_conditions,
            'wind_speed' => $request->wind_speed,
            'wind_direction' => $request->wind_direction,
            'notes' => $request->notes,
        ]);
        
        return redirect()->route('dashboard.flight-logs')->with('success', 'Flight log updated successfully!');
    }
    
    public function destroyFlightLog(FlightLog $flightLog)
    {
        // Check if user owns this flight log
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }
        
        // Delete associated files
        if ($flightLog->track_file) {
            Storage::disk('public')->delete($flightLog->track_file);
        }
        
        if ($flightLog->photos) {
            $photos = json_decode($flightLog->photos, true);
            if (is_array($photos)) {
                foreach ($photos as $photo) {
                    Storage::disk('public')->delete($photo);
                }
            }
        }
        
        $flightLog->delete();
        
        return redirect()->route('dashboard.flight-logs')->with('success', 'Flight log deleted successfully!');
    }
}
    public function deleteGalleryItem($id)
    {
        $gallery = Gallery::find($id);
        
        if ($gallery && $gallery->user_id == Auth::id()) {
            Storage::disk('public')->delete($gallery->file_path);
            $gallery->delete();
            return redirect()->route('dashboard.gallery')->with('success', 'Item deleted successfully!');
        }
        
        return redirect()->route('dashboard.gallery')->with('error', 'Item not found!');
    }

    public function deleteGalleryItem($id)
    {
        $gallery = Gallery::find($id);
        
        if ($gallery && $gallery->user_id == Auth::id()) {
            Storage::disk('public')->delete($gallery->file_path);
            $gallery->delete();
            return redirect()->route('dashboard.gallery')->with('success', 'Item deleted successfully!');
        }
        
        return redirect()->route('dashboard.gallery')->with('error', 'Item not found!');
    }

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class UserDashboardController extends Controller
{
    //
}
<?php

namespace App\Http\Controllers;

use App\Models\FlightLog;
use App\Models\Gallery;
use App\Models\Certificate;
use App\Models\Achievement;
use App\Models\UserStatistics;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class DashboardController extends Controller
{
    // Main dashboard
    public function index()
    {
        $user = Auth::user();
        
        $stats = [
            'total_flights' => FlightLog::where('user_id', $user->id)->count(),
            'total_hours' => FlightLog::where('user_id', $user->id)->sum('duration'),
            'total_distance' => FlightLog::where('user_id', $user->id)->sum('distance'),
            'max_altitude' => FlightLog::where('user_id', $user->id)->max('max_altitude'),
            'certificates' => Certificate::where('user_id', $user->id)->count(),
            'achievements' => Achievement::whereHas('users', function($q) use ($user) {
                $q->where('user_id', $user->id);
            })->count(),
        ];

        $recentFlights = FlightLog::where('user_id', $user->id)
            ->orderBy('flight_date', 'desc')
            ->take(5)
            ->get();

        return view('dashboard', compact('stats', 'recentFlights'));
    }

    // Gallery methods
    public function gallery()
    {
        $galleries = Gallery::where('user_id', Auth::id())
            ->orderBy('created_at', 'desc')
            ->paginate(12);

        $flightLogs = FlightLog::where('user_id', Auth::id())
            ->orderBy('flight_date', 'desc')
            ->get();

        return view('dashboard.gallery', compact('galleries', 'flightLogs'));
    }

    public function uploadToGallery(Request $request)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'file' => 'required|file|mimes:jpeg,png,jpg,gif,mp4,mpeg,quicktime|max:51200', // 50MB max
            'flight_log_id' => 'nullable|exists:flight_logs,id',
            'category' => 'required|in:flight,equipment,scenery,team,other',
            'is_public' => 'boolean'
        ]);

        $file = $request->file('file');
        $path = $file->store('gallery/' . Auth::id(), 'public');

        $gallery = Gallery::create([
            'user_id' => Auth::id(),
            'flight_log_id' => $request->flight_log_id,
            'title' => $request->title,
            'description' => $request->description,
            'file_path' => $path,
            'type' => $file->getMimeType(),
            'category' => $request->category,
            'is_public' => $request->boolean('is_public', false)
        ]);

        return redirect()->route('dashboard.gallery')
            ->with('success', 'File uploaded successfully!');
    }

    public function deleteGalleryItem($id)
    {
        $gallery = Gallery::where('user_id', Auth::id())->findOrFail($id);
        
        // Delete file from storage
        if (Storage::disk('public')->exists($gallery->file_path)) {
            Storage::disk('public')->delete($gallery->file_path);
        }
        
        $gallery->delete();

        return redirect()->route('dashboard.gallery')
            ->with('success', 'Gallery item deleted successfully!');
    }

    // Certificates methods
    public function certificates()
    {
        $certificates = Certificate::where('user_id', Auth::id())
            ->orderBy('issued_date', 'desc')
            ->get();

        // Check and generate automatic certificates
        $this->checkAndGenerateCertificates();

        return view('dashboard.certificates', compact('certificates'));
    }

    private function checkAndGenerateCertificates()
    {
        $user = Auth::user();
        $flightCount = 0;
        $totalHours = 0;

        // First Flight Certificate
        if ($flightCount >= 1 && !Certificate::where('user_id', $user->id)->where('type', 'first_flight')->exists()) {
            Certificate::create([
                'user_id' => $user->id,
                'type' => 'first_flight',
                'title' => 'First Flight Certificate',
                'description' => 'Congratulations on completing your first paragliding flight!',
                'certificate_number' => 'CERT-' . Str::upper(Str::random(10)),
                'issued_date' => now()
            ]);
        }

        // 10 Flights Milestone
        if ($flightCount >= 10 && !Certificate::where('user_id', $user->id)->where('type', '10_flights')->exists()) {
            Certificate::create([
                'user_id' => $user->id,
                'type' => '10_flights',
                'title' => '10 Flights Milestone',
                'description' => 'Achievement unlocked: 10 successful flights completed!',
                'certificate_number' => 'CERT-' . Str::upper(Str::random(10)),
                'issued_date' => now()
            ]);
        }

        // 50 Hours Milestone
        if ($totalHours >= 50 && !Certificate::where('user_id', $user->id)->where('type', '50_hours')->exists()) {
            Certificate::create([
                'user_id' => $user->id,
                'type' => '50_hours',
                'title' => '50 Hours Airtime',
                'description' => 'Congratulations on achieving 50 hours of flight time!',
                'certificate_number' => 'CERT-' . Str::upper(Str::random(10)),
                'issued_date' => now()
            ]);
        }
    }

    public function downloadCertificate($id)
    {
        $certificate = Certificate::where('user_id', Auth::id())->findOrFail($id);
        
        // Generate PDF logic here
        return view('certificates.download', compact('certificate'));
    }

    // Achievements methods
    public function achievements()
    {
        $user = Auth::user();
        
        // Check and unlock achievements
        $this->checkAndUnlockAchievements();
        
        $allAchievements = Achievement::all();
        $userAchievements = $user->achievements()->pluck('achievement_id')->toArray();

        return view('dashboard.achievements', compact('allAchievements', 'userAchievements'));
    }

    private function checkAndUnlockAchievements()
    {
        $user = Auth::user();
        $stats = [
            'flights' => FlightLog::where('user_id', $user->id)->count(),
            'hours' => FlightLog::where('user_id', $user->id)->sum('duration'),
            'max_altitude' => FlightLog::where('user_id', $user->id)->max('max_altitude'),
            'total_distance' => FlightLog::where('user_id', $user->id)->sum('distance')
        ];

        // Define achievements
        $achievementCriteria = [
            ['type' => 'first_flight', 'condition' => $stats['flights'] >= 1],
            ['type' => 'high_flyer', 'condition' => $stats['max_altitude'] >= 3000],
            ['type' => 'long_distance', 'condition' => $stats['total_distance'] >= 100],
            ['type' => 'veteran', 'condition' => $stats['hours'] >= 100],
        ];

        foreach ($achievementCriteria as $criteria) {
            if ($criteria['condition']) {
                $achievement = Achievement::firstOrCreate(['type' => $criteria['type']]);
                $user->achievements()->syncWithoutDetaching([$achievement->id => ['unlocked_at' => now()]]);
            }
        }
    }

    // Statistics methods
    public function statistics()
    {
        $user = Auth::user();
        
        $stats = [
            'total_flights' => FlightLog::where('user_id', $user->id)->count(),
            'total_hours' => FlightLog::where('user_id', $user->id)->sum('duration'),
            'total_distance' => FlightLog::where('user_id', $user->id)->sum('distance'),
            'max_altitude' => FlightLog::where('user_id', $user->id)->max('max_altitude'),
            'avg_duration' => FlightLog::where('user_id', $user->id)->avg('duration'),
            'favorite_site' => FlightLog::where('user_id', $user->id)
                ->select('site', \DB::raw('count(*) as count'))
                ->groupBy('site')
                ->orderByDesc('count')
                ->first(),
        ];

        $monthlyFlights = FlightLog::where('user_id', $user->id)
            ->selectRaw('MONTH(flight_date) as month, COUNT(*) as count')
            ->whereYear('flight_date', date('Y'))
            ->groupBy('month')
            ->get();

        return view('dashboard.statistics', compact('stats', 'monthlyFlights'));
    }

    // Flight Log methods (existing)
    public function flightLogs()
    {
        $flightLogs = FlightLog::where('user_id', Auth::id())
            ->orderBy('flight_date', 'desc')
            ->paginate(10);

        return view('dashboard.flight-logs', compact('flightLogs'));
    }

    public function createFlightLog()
    {
        return view('dashboard.flight-logs-create');
    }

    public function storeFlightLog(Request $request)
    {
        $validated = $request->validate([
            'flight_date' => 'required|date',
            'site' => 'required|string|max:255',
            'duration' => 'required|numeric|min:0',
            'max_altitude' => 'required|numeric|min:0',
            'distance' => 'nullable|numeric|min:0',
            'wing_model' => 'nullable|string|max:255',
            'weather_conditions' => 'nullable|string',
            'notes' => 'nullable|string'
        ]);

        $validated['user_id'] = Auth::id();
        
        FlightLog::create($validated);

        return redirect()->route('dashboard.flight-logs')
            ->with('success', 'Flight log added successfully!');
    }

    public function editFlightLog(FlightLog $flightLog)
    {
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }

        return view('dashboard.flight-logs-edit', compact('flightLog'));
    }

    public function updateFlightLog(Request $request, FlightLog $flightLog)
    {
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }

        $validated = $request->validate([
            'flight_date' => 'required|date',
            'site' => 'required|string|max:255',
            'duration' => 'required|numeric|min:0',
            'max_altitude' => 'required|numeric|min:0',
            'distance' => 'nullable|numeric|min:0',
            'wing_model' => 'nullable|string|max:255',
            'weather_conditions' => 'nullable|string',
            'notes' => 'nullable|string'
        ]);

        $flightLog->update($validated);

        return redirect()->route('dashboard.flight-logs')
            ->with('success', 'Flight log updated successfully!');
    }

    public function destroyFlightLog(FlightLog $flightLog)
    {
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }

        $flightLog->delete();

        return redirect()->route('dashboard.flight-logs')
            ->with('success', 'Flight log deleted successfully!');
    }
}

DASHBOARD VIEWS:
FILE: resources/views/vendor/filament-panels/pages/dashboard.blade.php
<x-filament-panels::page class="fi-dashboard-page">
    @if (method_exists($this, 'filtersForm'))
        {{ $this->filtersForm }}
    @endif

    <x-filament-widgets::widgets
        :columns="$this->getColumns()"
        :data="
            [
                ...(property_exists($this, 'filters') ? ['filters' => $this->filters] : []),
                ...$this->getWidgetData(),
            ]
        "
        :widgets="$this->getVisibleWidgets()"
    />
</x-filament-panels::page>
FILE: resources/views/dashboard
FILE: resources/views/dashboard.blade.php
@extends('layouts.app')

@section('content')
<style>
    .stats-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
    }
    .stats-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        font-size: 24px;
FILE: resources/views/dashboard.blade.php.bak
@extends('layouts.app')

@section('content')
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header with Add Flight Button -->
        <div class="bg-white rounded-lg shadow-xl p-6 mb-8">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold text-gray-800">Welcome back, {{ auth()->user()->name }}!</h1>
                    <p class="text-gray-600 mt-2">Your Paragliding Journey Dashboard</p>
                </div>
                <!-- ADD FLIGHT LOG BUTTON -->
                <a href="{{ route('dashboard.flight-logs.create') }}" 
                   class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg flex items-center shadow-lg transform hover:scale-105 transition">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Add Flight Log
                </a>
