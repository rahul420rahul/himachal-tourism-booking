=== routes/web.php ===
<?php

use App\Http\Controllers\HomeController;
use App\Http\Controllers\PackageController;
use App\Http\Controllers\BookingController;
use App\Http\Controllers\PaymentController;
use App\Http\Controllers\WeatherController;
use App\Http\Controllers\ContactController;
use App\Http\Controllers\AboutController;
use App\Http\Controllers\ServiceController;
use App\Http\Controllers\InvoiceController;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\GalleryController;
use App\Http\Controllers\PageController;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\CertificateController;
use App\Http\Controllers\BookingSuccessController;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;

// Root route - home page
Route::get('/', [HomeController::class, 'index'])->name('home');

// Public Package routes
Route::get('/packages', [PackageController::class, 'index'])->name('packages.index');
Route::get('/packages/{package}', [PackageController::class, 'show'])->name('packages.show');

// Weather routes
Route::get('/weather/{city?}', [WeatherController::class, 'getCurrentWeather'])->name('weather.current');
Route::get('/forecast/{city?}', [WeatherController::class, 'getForecast'])->name('weather.forecast');

// PUBLIC BOOKING ROUTES - MUST BE OUTSIDE AUTH MIDDLEWARE
Route::post('/bookings', [BookingController::class, 'store'])->name('bookings.store');
Route::get('/bookings/{id}/guest', [BookingController::class, 'guestShow'])->name('bookings.guest');
Route::get('/bookings/create', [BookingController::class, 'create'])->name('bookings.create');

// React Booking Route - Single definition
Route::get('/booking/{package_id}', function ($package_id) {
    return view('booking.react', ['package_id' => $package_id]);
})->name('booking.show');

// Booking success page - Single definition
Route::get('/booking-success/{id}', [BookingSuccessController::class, 'show'])->name('booking.success');

// REACT BOOKING ROUTE - PROPERLY CONFIGURED
Route::get('/booking-new/{id?}', function ($id = null) {
    $packages = \App\Models\Package::where('is_active', true)->get();
    $selectedPackage = null;
    
    if ($id) {
        $selectedPackage = \App\Models\Package::find($id);
        if (!$selectedPackage) {
            abort(404, 'Package not found');
        }
    }
    
    return view('react-booking', [
        'packages' => $packages,
        'selectedPackage' => $selectedPackage
    ]);
})->name('booking.react');

// Payment routes (accessible to guests)
Route::post('/payments/create-order', [PaymentController::class, 'createOrder'])->name('payments.create-order');
Route::post('/payments/callback', [PaymentController::class, 'handleCallback'])->name('payments.callback');
Route::post('/payments/verify', [PaymentController::class, 'verifyPayment'])->name('payments.verify');
Route::post('/verify-payment', [PaymentController::class, 'verifyPayment'])->name('verify.payment');
Route::post('/payments/failure', [PaymentController::class, 'handleFailure'])->name('payments.failure');

// Contact routes
Route::get('/contact', [ContactController::class, 'index'])->name('contact');
Route::post('/contact', [ContactController::class, 'store'])->name('contact.store');

// About and Services routes
Route::get('/about', [AboutController::class, 'index'])->name('about');
Route::get('/services', [ServiceController::class, 'index'])->name('services');

// Service specific pages
Route::prefix('services')->name('services.')->group(function () {
    Route::get('/tandem-flights', [ServiceController::class, 'tandem'])->name('tandem');
    Route::get('/training-courses', [ServiceController::class, 'training'])->name('training');
    Route::get('/equipment-rental', [ServiceController::class, 'rental'])->name('rental');
    Route::get('/photography', [ServiceController::class, 'photography'])->name('photography');
});

// Gallery
Route::get('/gallery', [GalleryController::class, 'index'])->name('gallery');

// Static pages
Route::get('/safety', [PageController::class, 'safety'])->name('safety');
Route::get('/privacy-policy', [PageController::class, 'privacy'])->name('privacy');
Route::get('/terms-conditions', [PageController::class, 'terms'])->name('terms');
Route::get('/refund-policy', [PageController::class, 'refund'])->name('refund');

// PUBLIC API Routes (NO AUTH REQUIRED)
Route::prefix('api')->group(function () {
    Route::get('/packages/search', [PackageController::class, 'search'])->name('api.packages.search');
    Route::get('/packages', [\App\Http\Controllers\Api\ReactBookingController::class, 'getPackages'] ?? [PackageController::class, 'index']);
    Route::get('/time-slots', [BookingController::class, 'getAvailableTimeSlots'])->name('api.time-slots');
    Route::get('/weather-check', [BookingController::class, 'checkWeather'])->name('api.weather-check');
    
    // Booking API routes
    Route::post('/bookings', [\App\Http\Controllers\Api\BookingController::class, 'store']);
    Route::get('/my-bookings', [\App\Http\Controllers\Api\BookingController::class, 'getMyBookings']);
});

// CORS preflight requests for payment routes
Route::options('/payments/{any}', function () {
    return response()->json([], 200, [
        'Access-Control-Allow-Origin' => '*',
        'Access-Control-Allow-Methods' => 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers' => 'Origin, Content-Type, Accept, Authorization, X-Request-With',
        'Access-Control-Max-Age' => 3600,
    ]);
})->where('any', '.*');

// Protected routes (require authentication)
Route::middleware('auth')->group(function () {
    // Complete payment routes
    Route::post('/bookings/{booking}/complete-payment', [PaymentController::class, 'createPaymentOrder'])->name('bookings.complete-payment');
    Route::post('/bookings/{booking}/verify-payment', [PaymentController::class, 'verifyPayment'])->name('bookings.verify-payment');
    
    // Main Dashboard Route
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
    
    // Dashboard Sub-routes
    Route::prefix('dashboard')->name('dashboard.')->group(function () {
        Route::get('/certificates', [DashboardController::class, 'certificates'])->name('certificates');
        Route::get('/certificates/{certificate}/download', [DashboardController::class, 'downloadCertificate'])->name('certificate.download');
        Route::get('/gallery', [DashboardController::class, 'gallery'])->name('gallery');
        Route::post('/gallery/upload', [DashboardController::class, 'uploadToGallery'])->name('gallery.upload');
        Route::delete('/gallery/{gallery}', [DashboardController::class, 'deleteGalleryItem'])->name('gallery.delete');
        Route::get('/achievements', [DashboardController::class, 'achievements'])->name('achievements');
        Route::get('/statistics', [DashboardController::class, 'statistics'])->name('statistics');
        
        // Flight Log CRUD Routes
        Route::get('/flight-logs', [DashboardController::class, 'flightLogs'])->name('flight-logs');
        Route::get('/flight-logs/create', [DashboardController::class, 'createFlightLog'])->name('flight-logs.create');
        Route::post('/flight-logs', [DashboardController::class, 'storeFlightLog'])->name('flight-logs.store');
        Route::get('/flight-logs/{flightLog}/edit', [DashboardController::class, 'editFlightLog'])->name('flight-logs.edit');
        Route::put('/flight-logs/{flightLog}', [DashboardController::class, 'updateFlightLog'])->name('flight-logs.update');
        Route::delete('/flight-logs/{flightLog}', [DashboardController::class, 'destroyFlightLog'])->name('flight-logs.destroy');
    });
    
    // Profile routes
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
    Route::get('/settings', [ProfileController::class, 'settings'])->name('settings');
    
    // Authenticated Booking routes
    Route::get('/bookings/{booking}', [BookingController::class, 'show'])->name('bookings.show');
    Route::patch('/bookings/{booking}', [BookingController::class, 'update'])->name('bookings.update');
    Route::delete('/bookings/{booking}', [BookingController::class, 'destroy'])->name('bookings.destroy');
    
    // Invoice Management Routes
    Route::resource('invoices', InvoiceController::class);
    Route::get('invoices/{invoice}/pdf', [InvoiceController::class, 'downloadPdf'])->name('invoices.pdf');
    Route::post('invoices/{invoice}/send', [BookingController::class, 'sendEmail'])->name('invoices.send');
    Route::post('invoices/{invoice}/pay', [InvoiceController::class, 'markAsPaid'])->name('invoices.pay');
    Route::post('invoices/{invoice}/duplicate', [InvoiceController::class, 'duplicate'])->name('invoices.duplicate');
    
    // AUTHENTICATED API Routes
    Route::prefix('api')->group(function () {
        Route::get('/customers/search', [BookingController::class, 'searchCustomers'])->name('api.customers.search');
        Route::get('/bookings/calendar', [BookingController::class, 'calendarData'])->name('api.bookings.calendar');
        Route::get('/invoices/stats', [InvoiceController::class, 'getStats'])->name('api.invoices.stats');
    });
    
    // Admin/Manager only routes
    Route::middleware(['can:manage-system'])->group(function () {
        // Package Management
        Route::post('/packages', [PackageController::class, 'store'])->name('packages.store');
        Route::get('/packages/create', [PackageController::class, 'create'])->name('packages.create');
        Route::get('/packages/{package}/edit', [PackageController::class, 'edit'])->name('packages.edit');
        Route::patch('/packages/{package}', [PackageController::class, 'update'])->name('packages.update');
        Route::delete('/packages/{package}', [PackageController::class, 'destroy'])->name('packages.destroy');
        
        // Payment Management
        Route::get('/manage/payments', [PaymentController::class, 'index'])->name('admin.payments.index');
        Route::get('/manage/payments/{payment}', [PaymentController::class, 'show'])->name('admin.payments.show');
        
        // Contact Management
        Route::get('/manage/contacts', [ContactController::class, 'adminIndex'])->name('admin.contacts.index');
        Route::get('/manage/contacts/{contact}', [ContactController::class, 'adminShow'])->name('admin.contacts.show');
        Route::patch('/manage/contacts/{contact}', [ContactController::class, 'markAsRead'])->name('admin.contacts.read');
        Route::delete('/manage/contacts/{contact}', [ContactController::class, 'destroy'])->name('admin.contacts.destroy');
        
        // Service Management
        Route::post('/services', [ServiceController::class, 'store'])->name('services.store');
        Route::get('/services/create', [ServiceController::class, 'create'])->name('services.create');
        Route::get('/services/{service}/edit', [ServiceController::class, 'edit'])->name('services.edit');
        Route::patch('/services/{service}', [ServiceController::class, 'update'])->name('services.update');
        Route::delete('/services/{service}', [ServiceController::class, 'destroy'])->name('services.destroy');
        
        // Gallery Management
        Route::post('/gallery', [GalleryController::class, 'store'])->name('gallery.store');
        Route::get('/gallery/create', [GalleryController::class, 'create'])->name('gallery.create');
        Route::get('/gallery/{gallery}/edit', [GalleryController::class, 'edit'])->name('gallery.edit');
        Route::patch('/gallery/{gallery}', [GalleryController::class, 'update'])->name('gallery.update');
        Route::delete('/gallery/{gallery}', [GalleryController::class, 'destroy'])->name('gallery.destroy');
        
        // Reports and Analytics
        Route::get('/manage/reports', function () {
            return view('admin.reports.index');
        })->name('admin.reports');
        
        Route::get('/manage/analytics', function () {
            return view('admin.analytics.index');
        })->name('admin.analytics');
        
        Route::get('/manage/settings', function () {
            return view('admin.settings.index');
        })->name('admin.settings');
    });
});

// My Bookings (authenticated)
Route::get('/my-bookings', function() { 
    return view('bookings.my-bookings'); 
})->name('bookings.my')->middleware('auth');

// Guest Invoice View (Public access with token)
Route::get('/invoices/{invoice}/view/{token}', [InvoiceController::class, 'publicView'])->name('invoices.public');
Route::get('/invoices/{invoice}/download/{token}', [InvoiceController::class, 'publicDownload'])->name('invoices.public.download');

// Certificate Verification Route (Public)
Route::get('/certificate/verify/{certificate_number}', [CertificateController::class, 'verify'])->name('certificate.verify');

// Health Check Route
Route::get('/health', function () {
    return response()->json([
        'status' => 'OK',
        'timestamp' => now(),
        'app' => config('app.name'),
        'version' => '1.0.0',
        'cache' => Cache::has('health_check'),
        'database' => DB::connection()->getPdo() ? true : false,
    ]);
})->name('health');

// Maintenance Mode Check
Route::get('/maintenance', function () {
    return view('errors.503');
})->name('maintenance');

// Rewards routes
Route::get('/rewards', function () {
    return view('rewards.index');
})->name('rewards');

// Test routes
Route::get('/test', function() { return view('test'); });
Route::get('/test123', function() { return 'Test route works!'; });
Route::get('/test-react', fn() => view('test-react'));
Route::get('/packages-react', fn() => view('react-packages'))->name('packages.react');

// Fallback route for 404
Route::fallback(function () {
    return view('errors.404');
});

// Auth routes
require __DIR__.'/auth.php';

// Include other route files if they exist
if (file_exists(__DIR__.'/web_react_booking.php')) {
    require __DIR__.'/web_react_booking.php';
}

=== DashboardController (if exists) ===
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Certificate;
use App\Models\FlightLog;
use App\Models\Achievement;
use App\Models\Gallery;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Carbon\Carbon;

class DashboardController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        
        // Get statistics
        $stats = (object)[
            'total_flights' => FlightLog::where('user_id', $user->id)->count(),
            'total_flight_hours' => FlightLog::where('user_id', $user->id)->sum('flight_duration') / 60,
        ];
        
        // Get recent data
        $certificates = Certificate::where('user_id', $user->id)->latest()->get();
        $recentFlightLogs = FlightLog::where('user_id', $user->id)->latest()->take(5)->get();
        $recentAchievements = Achievement::where('user_id', $user->id)->latest()->take(5)->get();
        
        return view('dashboard', compact('stats', 'certificates', 'recentFlightLogs', 'recentAchievements'));
    }
    
    public function certificates()
    {
        $certificates = Certificate::where('user_id', Auth::id())->get();
        return view('dashboard.certificates', compact('certificates'));
    }
    
    public function downloadCertificate(Certificate $certificate)
    {
        // Implement certificate download logic
        return response()->download(storage_path('app/public/' . $certificate->file_path));
    }
    
    public function gallery()
    {
        return view('dashboard.gallery');
    }
    
    public function uploadToGallery(Request $request)
    {
        $request->validate([
            'title' => 'nullable|string|max:255',
            'file' => 'required|file|mimes:jpg,jpeg,png,gif,mp4,avi,mov|max:51200' // 50MB max
        ]);
        
        $file = $request->file('file');
        $filePath = $file->store('gallery', 'public');
        
        // Determine if it's a photo or video
        $type = in_array($file->getClientOriginalExtension(), ['mp4', 'avi', 'mov']) ? 'video' : 'photo';
        
        Gallery::create([
            'user_id' => Auth::id(),
            'title' => $request->title ?? 'Untitled',
            'file_path' => $filePath,
            'type' => $type,
        ]);
        
        return redirect()->route('dashboard.gallery')->with('success', 'File uploaded successfully!');
    }
    
    public function flightLogs()
    {
        $flightLogs = FlightLog::where('user_id', Auth::id())
            ->orderBy('date', 'desc')
            ->paginate(10);
        
        return view('dashboard.flight-logs', compact('flightLogs'));
    }
    
    public function achievements()
    {
        $achievements = Achievement::where('user_id', Auth::id())->get();
        return view('dashboard.achievements', compact('achievements'));
    }
    
    public function statistics()
    {
        $stats = (object)[
            'total_flights' => FlightLog::where('user_id', Auth::id())->count(),
            'total_hours' => FlightLog::where('user_id', Auth::id())->sum('flight_duration') / 60,
            'max_altitude' => FlightLog::where('user_id', Auth::id())->max('max_altitude'),
            'total_distance' => FlightLog::where('user_id', Auth::id())->sum('distance'),
        ];
        
        return view('dashboard.statistics', compact('stats'));
    }
    
    // Flight Log CRUD Methods
    public function createFlightLog()
    {
        return view('dashboard.flight-logs-create');
    }
    
    public function storeFlightLog(Request $request)
    {
        $request->validate([
            'date' => 'required|date',
            'site_name' => 'required|string|max:255',
            'launch_time' => 'required',
            'landing_time' => 'required',
            'max_altitude' => 'nullable|numeric',
            'distance' => 'nullable|numeric',
            'glider_model' => 'nullable|string|max:255',
            'weather_conditions' => 'nullable|string',
            'wind_speed' => 'nullable|string|max:50',
            'wind_direction' => 'nullable|string|max:10',
            'notes' => 'nullable|string',
            'track_file' => 'nullable|file|mimes:gpx,igc,kml|max:10240',
            'photos.*' => 'nullable|image|max:5120'
        ]);
        
        // Calculate flight duration
        $launchTime = Carbon::parse($request->date . ' ' . $request->launch_time);
        $landingTime = Carbon::parse($request->date . ' ' . $request->landing_time);
        $duration = $launchTime->diffInMinutes($landingTime);
        
        // Handle file uploads
        $trackFilePath = null;
        if ($request->hasFile('track_file')) {
            $trackFilePath = $request->file('track_file')->store('flight-tracks', 'public');
        }
        
        $photos = [];
        if ($request->hasFile('photos')) {
            foreach ($request->file('photos') as $photo) {
                $photos[] = $photo->store('flight-photos', 'public');
            }
        }
        
        // Create flight log
        $flightLog = FlightLog::create([
            'user_id' => Auth::id(),
            'date' => $launchTime,
            'site_name' => $request->site_name,
            'launch_time' => $launchTime,
            'landing_time' => $landingTime,
            'flight_duration' => $duration,
            'max_altitude' => $request->max_altitude,
            'distance' => $request->distance,
            'glider_model' => $request->glider_model,
            'weather_conditions' => $request->weather_conditions,
            'wind_speed' => $request->wind_speed,
            'wind_direction' => $request->wind_direction,
            'notes' => $request->notes,
            'track_file' => $trackFilePath,
            'photos' => json_encode($photos),
            'is_verified' => false
        ]);
        
        return redirect()->route('dashboard.flight-logs')->with('success', 'Flight log added successfully!');
    }
    
    public function editFlightLog(FlightLog $flightLog)
    {
        // Check if user owns this flight log
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }
        
        return view('dashboard.flight-logs-edit', compact('flightLog'));
    }
    
    public function updateFlightLog(Request $request, FlightLog $flightLog)
    {
        // Check if user owns this flight log
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }
        
        $request->validate([
            'date' => 'required|date',
            'site_name' => 'required|string|max:255',
            'launch_time' => 'required',
            'landing_time' => 'required',
            'max_altitude' => 'nullable|numeric',
            'distance' => 'nullable|numeric',
        ]);
        
        // Calculate flight duration
        $launchTime = Carbon::parse($request->date . ' ' . $request->launch_time);
        $landingTime = Carbon::parse($request->date . ' ' . $request->landing_time);
        $duration = $launchTime->diffInMinutes($landingTime);
        
        $flightLog->update([
            'date' => $launchTime,
            'site_name' => $request->site_name,
            'launch_time' => $launchTime,
            'landing_time' => $landingTime,
            'flight_duration' => $duration,
            'max_altitude' => $request->max_altitude,
            'distance' => $request->distance,
            'glider_model' => $request->glider_model,
            'weather_conditions' => $request->weather_conditions,
            'wind_speed' => $request->wind_speed,
            'wind_direction' => $request->wind_direction,
            'notes' => $request->notes,
        ]);
        
        return redirect()->route('dashboard.flight-logs')->with('success', 'Flight log updated successfully!');
    }
    
    public function destroyFlightLog(FlightLog $flightLog)
    {
        // Check if user owns this flight log
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }
        
        // Delete associated files
        if ($flightLog->track_file) {
            Storage::disk('public')->delete($flightLog->track_file);
        }
        
        if ($flightLog->photos) {
            $photos = json_decode($flightLog->photos, true);
            if (is_array($photos)) {
                foreach ($photos as $photo) {
                    Storage::disk('public')->delete($photo);
                }
            }
        }
        
        $flightLog->delete();
        
        return redirect()->route('dashboard.flight-logs')->with('success', 'Flight log deleted successfully!');
    }
}
    public function deleteGalleryItem($id)
    {
        $gallery = Gallery::find($id);
        
        if ($gallery && $gallery->user_id == Auth::id()) {
            Storage::disk('public')->delete($gallery->file_path);
            $gallery->delete();
            return redirect()->route('dashboard.gallery')->with('success', 'Item deleted successfully!');
        }
        
        return redirect()->route('dashboard.gallery')->with('error', 'Item not found!');
    }

    public function deleteGalleryItem($id)
    {
        $gallery = Gallery::find($id);
        
        if ($gallery && $gallery->user_id == Auth::id()) {
            Storage::disk('public')->delete($gallery->file_path);
            $gallery->delete();
            return redirect()->route('dashboard.gallery')->with('success', 'Item deleted successfully!');
        }
        
        return redirect()->route('dashboard.gallery')->with('error', 'Item not found!');
    }

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class UserDashboardController extends Controller
{
    //
}
<?php

namespace App\Http\Controllers;

use App\Models\FlightLog;
use App\Models\Gallery;
use App\Models\Certificate;
use App\Models\Achievement;
use App\Models\UserStatistics;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class DashboardController extends Controller
{
    // Main dashboard
    public function index()
    {
        $user = Auth::user();
        
        $stats = [
            'total_flights' => FlightLog::where('user_id', $user->id)->count(),
            'total_hours' => FlightLog::where('user_id', $user->id)->sum('duration'),
            'total_distance' => FlightLog::where('user_id', $user->id)->sum('distance'),
            'max_altitude' => FlightLog::where('user_id', $user->id)->max('max_altitude'),
            'certificates' => Certificate::where('user_id', $user->id)->count(),
            'achievements' => Achievement::whereHas('users', function($q) use ($user) {
                $q->where('user_id', $user->id);
            })->count(),
        ];

        $recentFlights = FlightLog::where('user_id', $user->id)
            ->orderBy('flight_date', 'desc')
            ->take(5)
            ->get();

        return view('dashboard', compact('stats', 'recentFlights'));
    }

    // Gallery methods
    public function gallery()
    {
        $galleries = Gallery::where('user_id', Auth::id())
            ->orderBy('created_at', 'desc')
            ->paginate(12);

        $flightLogs = FlightLog::where('user_id', Auth::id())
            ->orderBy('flight_date', 'desc')
            ->get();

        return view('dashboard.gallery', compact('galleries', 'flightLogs'));
    }

    public function uploadToGallery(Request $request)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'file' => 'required|file|mimes:jpeg,png,jpg,gif,mp4,mpeg,quicktime|max:51200', // 50MB max
            'flight_log_id' => 'nullable|exists:flight_logs,id',
            'category' => 'required|in:flight,equipment,scenery,team,other',
            'is_public' => 'boolean'
        ]);

        $file = $request->file('file');
        $path = $file->store('gallery/' . Auth::id(), 'public');

        $gallery = Gallery::create([
            'user_id' => Auth::id(),
            'flight_log_id' => $request->flight_log_id,
            'title' => $request->title,
            'description' => $request->description,
            'file_path' => $path,
            'type' => $file->getMimeType(),
            'category' => $request->category,
            'is_public' => $request->boolean('is_public', false)
        ]);

        return redirect()->route('dashboard.gallery')
            ->with('success', 'File uploaded successfully!');
    }

    public function deleteGalleryItem($id)
    {
        $gallery = Gallery::where('user_id', Auth::id())->findOrFail($id);
        
        // Delete file from storage
        if (Storage::disk('public')->exists($gallery->file_path)) {
            Storage::disk('public')->delete($gallery->file_path);
        }
        
        $gallery->delete();

        return redirect()->route('dashboard.gallery')
            ->with('success', 'Gallery item deleted successfully!');
    }

    // Certificates methods
    public function certificates()
    {
        $certificates = Certificate::where('user_id', Auth::id())
            ->orderBy('issued_date', 'desc')
            ->get();

        // Check and generate automatic certificates
        $this->checkAndGenerateCertificates();

        return view('dashboard.certificates', compact('certificates'));
    }

    private function checkAndGenerateCertificates()
    {
        $user = Auth::user();
        $flightCount = 0;
        $totalHours = 0;

        // First Flight Certificate
        if ($flightCount >= 1 && !Certificate::where('user_id', $user->id)->where('type', 'first_flight')->exists()) {
            Certificate::create([
                'user_id' => $user->id,
                'type' => 'first_flight',
                'title' => 'First Flight Certificate',
                'description' => 'Congratulations on completing your first paragliding flight!',
                'certificate_number' => 'CERT-' . Str::upper(Str::random(10)),
                'issued_date' => now()
            ]);
        }

        // 10 Flights Milestone
        if ($flightCount >= 10 && !Certificate::where('user_id', $user->id)->where('type', '10_flights')->exists()) {
            Certificate::create([
                'user_id' => $user->id,
                'type' => '10_flights',
                'title' => '10 Flights Milestone',
                'description' => 'Achievement unlocked: 10 successful flights completed!',
                'certificate_number' => 'CERT-' . Str::upper(Str::random(10)),
                'issued_date' => now()
            ]);
        }

        // 50 Hours Milestone
        if ($totalHours >= 50 && !Certificate::where('user_id', $user->id)->where('type', '50_hours')->exists()) {
            Certificate::create([
                'user_id' => $user->id,
                'type' => '50_hours',
                'title' => '50 Hours Airtime',
                'description' => 'Congratulations on achieving 50 hours of flight time!',
                'certificate_number' => 'CERT-' . Str::upper(Str::random(10)),
                'issued_date' => now()
            ]);
        }
    }

    public function downloadCertificate($id)
    {
        $certificate = Certificate::where('user_id', Auth::id())->findOrFail($id);
        
        // Generate PDF logic here
        return view('certificates.download', compact('certificate'));
    }

    // Achievements methods
    public function achievements()
    {
        $user = Auth::user();
        
        // Check and unlock achievements
        $this->checkAndUnlockAchievements();
        
        $allAchievements = Achievement::all();
        $userAchievements = $user->achievements()->pluck('achievement_id')->toArray();

        return view('dashboard.achievements', compact('allAchievements', 'userAchievements'));
    }

    private function checkAndUnlockAchievements()
    {
        $user = Auth::user();
        $stats = [
            'flights' => FlightLog::where('user_id', $user->id)->count(),
            'hours' => FlightLog::where('user_id', $user->id)->sum('duration'),
            'max_altitude' => FlightLog::where('user_id', $user->id)->max('max_altitude'),
            'total_distance' => FlightLog::where('user_id', $user->id)->sum('distance')
        ];

        // Define achievements
        $achievementCriteria = [
            ['type' => 'first_flight', 'condition' => $stats['flights'] >= 1],
            ['type' => 'high_flyer', 'condition' => $stats['max_altitude'] >= 3000],
            ['type' => 'long_distance', 'condition' => $stats['total_distance'] >= 100],
            ['type' => 'veteran', 'condition' => $stats['hours'] >= 100],
        ];

        foreach ($achievementCriteria as $criteria) {
            if ($criteria['condition']) {
                $achievement = Achievement::firstOrCreate(['type' => $criteria['type']]);
                $user->achievements()->syncWithoutDetaching([$achievement->id => ['unlocked_at' => now()]]);
            }
        }
    }

    // Statistics methods
    public function statistics()
    {
        $user = Auth::user();
        
        $stats = [
            'total_flights' => FlightLog::where('user_id', $user->id)->count(),
            'total_hours' => FlightLog::where('user_id', $user->id)->sum('duration'),
            'total_distance' => FlightLog::where('user_id', $user->id)->sum('distance'),
            'max_altitude' => FlightLog::where('user_id', $user->id)->max('max_altitude'),
            'avg_duration' => FlightLog::where('user_id', $user->id)->avg('duration'),
            'favorite_site' => FlightLog::where('user_id', $user->id)
                ->select('site', \DB::raw('count(*) as count'))
                ->groupBy('site')
                ->orderByDesc('count')
                ->first(),
        ];

        $monthlyFlights = FlightLog::where('user_id', $user->id)
            ->selectRaw('MONTH(flight_date) as month, COUNT(*) as count')
            ->whereYear('flight_date', date('Y'))
            ->groupBy('month')
            ->get();

        return view('dashboard.statistics', compact('stats', 'monthlyFlights'));
    }

    // Flight Log methods (existing)
    public function flightLogs()
    {
        $flightLogs = FlightLog::where('user_id', Auth::id())
            ->orderBy('flight_date', 'desc')
            ->paginate(10);

        return view('dashboard.flight-logs', compact('flightLogs'));
    }

    public function createFlightLog()
    {
        return view('dashboard.flight-logs-create');
    }

    public function storeFlightLog(Request $request)
    {
        $validated = $request->validate([
            'flight_date' => 'required|date',
            'site' => 'required|string|max:255',
            'duration' => 'required|numeric|min:0',
            'max_altitude' => 'required|numeric|min:0',
            'distance' => 'nullable|numeric|min:0',
            'wing_model' => 'nullable|string|max:255',
            'weather_conditions' => 'nullable|string',
            'notes' => 'nullable|string'
        ]);

        $validated['user_id'] = Auth::id();
        
        FlightLog::create($validated);

        return redirect()->route('dashboard.flight-logs')
            ->with('success', 'Flight log added successfully!');
    }

    public function editFlightLog(FlightLog $flightLog)
    {
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }

        return view('dashboard.flight-logs-edit', compact('flightLog'));
    }

    public function updateFlightLog(Request $request, FlightLog $flightLog)
    {
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }

        $validated = $request->validate([
            'flight_date' => 'required|date',
            'site' => 'required|string|max:255',
            'duration' => 'required|numeric|min:0',
            'max_altitude' => 'required|numeric|min:0',
            'distance' => 'nullable|numeric|min:0',
            'wing_model' => 'nullable|string|max:255',
            'weather_conditions' => 'nullable|string',
            'notes' => 'nullable|string'
        ]);

        $flightLog->update($validated);

        return redirect()->route('dashboard.flight-logs')
            ->with('success', 'Flight log updated successfully!');
    }

    public function destroyFlightLog(FlightLog $flightLog)
    {
        if ($flightLog->user_id !== Auth::id()) {
            abort(403);
        }

        $flightLog->delete();

        return redirect()->route('dashboard.flight-logs')
            ->with('success', 'Flight log deleted successfully!');
    }
}


=== Dashboard Blade Views ===
FILE: resources/views/vendor/filament-panels/pages/dashboard.blade.php
<x-filament-panels::page class="fi-dashboard-page">
    @if (method_exists($this, 'filtersForm'))
        {{ $this->filtersForm }}
    @endif

    <x-filament-widgets::widgets
        :columns="$this->getColumns()"
        :data="
            [
                ...(property_exists($this, 'filters') ? ['filters' => $this->filters] : []),
                ...$this->getWidgetData(),
            ]
        "
        :widgets="$this->getVisibleWidgets()"
    />
</x-filament-panels::page>
FILE: resources/views/dashboard/flight-logs-create.blade.php
@extends('layouts.app')

@section('content')
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white rounded-lg shadow-xl p-8">
            <h1 class="text-2xl font-bold text-gray-800 mb-6">Add New Flight Log</h1>
            
            <form action="{{ route('dashboard.flight-logs.store') }}" method="POST" enctype="multipart/form-data">
                @csrf
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Flight Date -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Flight Date *</label>
                        <input type="date" name="date" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('date', date('Y-m-d')) }}">
                    </div>
                    
                    <!-- Site Name -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Site Name *</label>
                        <input type="text" name="site_name" required placeholder="e.g., Bir Billing, Kamshet"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('site_name') }}">
                    </div>
                    
                    <!-- Launch Time -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Launch Time *</label>
                        <input type="time" name="launch_time" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('launch_time') }}">
                    </div>
                    
                    <!-- Landing Time -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Landing Time *</label>
                        <input type="time" name="landing_time" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('landing_time') }}">
                    </div>
                    
                    <!-- Max Altitude -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Max Altitude (meters)</label>
                        <input type="number" name="max_altitude" placeholder="e.g., 2500"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('max_altitude') }}">
                    </div>
                    
                    <!-- Distance -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Distance (km)</label>
                        <input type="number" step="0.1" name="distance" placeholder="e.g., 15.5"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('distance') }}">
                    </div>
                    
                    <!-- Glider Model -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Glider Model</label>
                        <input type="text" name="glider_model" placeholder="e.g., Advance Alpha 6"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('glider_model') }}">
                    </div>
                    
                    <!-- Wind Speed -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Wind Speed</label>
                        <input type="text" name="wind_speed" placeholder="e.g., 15 km/h"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('wind_speed') }}">
                    </div>
                    
                    <!-- Wind Direction -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Wind Direction</label>
                        <select name="wind_direction" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="">Select Direction</option>
                            <option value="N">North (N)</option>
                            <option value="NE">North-East (NE)</option>
                            <option value="E">East (E)</option>
                            <option value="SE">South-East (SE)</option>
                            <option value="S">South (S)</option>
                            <option value="SW">South-West (SW)</option>
                            <option value="W">West (W)</option>
                            <option value="NW">North-West (NW)</option>
                        </select>
                    </div>
                    
                    <!-- Weather Conditions -->
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Weather Conditions</label>
                        <textarea name="weather_conditions" rows="2" placeholder="Describe weather conditions..."
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">{{ old('weather_conditions') }}</textarea>
                    </div>
                    
                    <!-- Flight Notes -->
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Flight Notes</label>
                        <textarea name="notes" rows="3" placeholder="Any special notes about this flight..."
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">{{ old('notes') }}</textarea>
                    </div>
                    
                    <!-- Upload Track File -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">GPS Track File (Optional)</label>
                        <input type="file" name="track_file" accept=".gpx,.igc,.kml"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <p class="text-xs text-gray-500 mt-1">Supported: GPX, IGC, KML files</p>
                    </div>
                    
                    <!-- Upload Photos -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Flight Photos (Optional)</label>
                        <input type="file" name="photos[]" multiple accept="image/*"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <p class="text-xs text-gray-500 mt-1">You can select multiple photos</p>
                    </div>
                </div>
                
                <!-- Submit Buttons -->
                <div class="mt-8 flex justify-end space-x-4">
                    <a href="{{ route('dashboard.flight-logs') }}" 
                       class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                        Cancel
                    </a>
                    <button type="submit" 
                            class="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        Save Flight Log
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection
FILE: resources/views/dashboard/gallery.blade.php
@extends('layouts.app')

@section('content')
<div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6">Gallery</h1>
    <p class="text-gray-500">No images uploaded yet.</p>
</div>
@endsection
FILE: resources/views/dashboard/statistics.blade.php
@extends('layouts.app')

@section('content')
<div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6">Flight Statistics</h1>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="font-semibold">Total Flights</h3>
            <p class="text-2xl">{{ $stats['total_flights'] ?? 0 }}</p>
        </div>
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="font-semibold">Total Hours</h3>
            <p class="text-2xl">{{ $stats['total_hours'] ?? 0 }}</p>
        </div>
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="font-semibold">Max Altitude</h3>
            <p class="text-2xl">{{ $stats['max_altitude'] ?? 0 }} m</p>
        </div>
    </div>
</div>
@endsection
FILE: resources/views/dashboard/flight-logs-edit.blade.php
@extends('layouts.app')

@section('content')
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white rounded-lg shadow-xl p-8">
            <h1 class="text-2xl font-bold text-gray-800 mb-6">Edit Flight Log</h1>
            
            <form action="{{ route('dashboard.flight-logs.update', $flightLog) }}" method="POST" enctype="multipart/form-data">
                @csrf
                @method('PUT')
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Flight Date -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Flight Date *</label>
                        <input type="date" name="date" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('date', $flightLog->date->format('Y-m-d')) }}">
                    </div>
                    
                    <!-- Site Name -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Site Name *</label>
                        <input type="text" name="site_name" required placeholder="e.g., Bir Billing, Kamshet"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('site_name', $flightLog->site_name) }}">
                    </div>
                    
                    <!-- Launch Time -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Launch Time *</label>
                        <input type="time" name="launch_time" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('launch_time', $flightLog->launch_time->format('H:i')) }}">
                    </div>
                    
                    <!-- Landing Time -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Landing Time *</label>
                        <input type="time" name="landing_time" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('landing_time', $flightLog->landing_time->format('H:i')) }}">
                    </div>
                    
                    <!-- Max Altitude -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Max Altitude (meters)</label>
                        <input type="number" name="max_altitude" placeholder="e.g., 2500"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('max_altitude', $flightLog->max_altitude) }}">
                    </div>
                    
                    <!-- Distance -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Distance (km)</label>
                        <input type="number" step="0.1" name="distance" placeholder="e.g., 15.5"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('distance', $flightLog->distance) }}">
                    </div>
                    
                    <!-- Glider Model -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Glider Model</label>
                        <input type="text" name="glider_model" placeholder="e.g., Advance Alpha 6"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('glider_model', $flightLog->glider_model) }}">
                    </div>
                    
                    <!-- Wind Speed -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Wind Speed</label>
                        <input type="text" name="wind_speed" placeholder="e.g., 15 km/h"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                               value="{{ old('wind_speed', $flightLog->wind_speed) }}">
                    </div>
                    
                    <!-- Wind Direction -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Wind Direction</label>
                        <select name="wind_direction" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <option value="">Select Direction</option>
                            <option value="N" {{ $flightLog->wind_direction == 'N' ? 'selected' : '' }}>North (N)</option>
                            <option value="NE" {{ $flightLog->wind_direction == 'NE' ? 'selected' : '' }}>North-East (NE)</option>
                            <option value="E" {{ $flightLog->wind_direction == 'E' ? 'selected' : '' }}>East (E)</option>
                            <option value="SE" {{ $flightLog->wind_direction == 'SE' ? 'selected' : '' }}>South-East (SE)</option>
                            <option value="S" {{ $flightLog->wind_direction == 'S' ? 'selected' : '' }}>South (S)</option>
                            <option value="SW" {{ $flightLog->wind_direction == 'SW' ? 'selected' : '' }}>South-West (SW)</option>
                            <option value="W" {{ $flightLog->wind_direction == 'W' ? 'selected' : '' }}>West (W)</option>
                            <option value="NW" {{ $flightLog->wind_direction == 'NW' ? 'selected' : '' }}>North-West (NW)</option>
                        </select>
                    </div>
                    
                    <!-- Weather Conditions -->
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Weather Conditions</label>
                        <textarea name="weather_conditions" rows="2" placeholder="Describe weather conditions..."
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">{{ old('weather_conditions', $flightLog->weather_conditions) }}</textarea>
                    </div>
                    
                    <!-- Flight Notes -->
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Flight Notes</label>
                        <textarea name="notes" rows="3" placeholder="Any special notes about this flight..."
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">{{ old('notes', $flightLog->notes) }}</textarea>
                    </div>
                </div>
                
                <!-- Submit Buttons -->
                <div class="mt-8 flex justify-end space-x-4">
                    <a href="{{ route('dashboard.flight-logs') }}" 
                       class="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                        Cancel
                    </a>
                    <button type="submit" 
                            class="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        Update Flight Log
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection
FILE: resources/views/dashboard/index.blade.php
@extends('layouts.app')

@section('content')
<div class="container-fluid px-4">
    <!-- Header Section -->
    <div class="mb-4">
        <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Flights</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ $stats['total_flights'] ?? 1 }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-plane fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Flight Hours</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ number_format($stats['total_hours'] ?? 0, 1) }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Certificates</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ $stats['certificates'] ?? 0 }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-certificate fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Achievements</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ $stats['achievements'] ?? 0 }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-trophy fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="d-flex justify-content-center flex-wrap gap-3">
                <a href="{{ route('dashboard.certificates') }}" class="text-decoration-none">
                    <div class="text-center p-4">
                        <div class="bg-warning rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 80px; height: 80px;">
                            <i class="fas fa-trophy fa-2x text-white"></i>
                        </div>
                        <p class="mt-2 mb-0 font-weight-bold">Certificates</p>
                    </div>
                </a>

                <a href="{{ route('dashboard.gallery') }}" class="text-decoration-none">
                    <div class="text-center p-4">
                        <div class="bg-info rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 80px; height: 80px;">
                            <i class="fas fa-camera fa-2x text-white"></i>
                        </div>
                        <p class="mt-2 mb-0 font-weight-bold">Gallery</p>
                    </div>
                </a>

                <a href="{{ route('dashboard.achievements') }}" class="text-decoration-none">
                    <div class="text-center p-4">
                        <div class="bg-danger rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 80px; height: 80px;">
                            <i class="fas fa-award fa-2x text-white"></i>
                        </div>
                        <p class="mt-2 mb-0 font-weight-bold">Achievements</p>
                    </div>
                </a>

                <a href="{{ route('dashboard.statistics') }}" class="text-decoration-none">
                    <div class="text-center p-4">
                        <div class="bg-primary rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 80px; height: 80px;">
                            <i class="fas fa-chart-bar fa-2x text-white"></i>
                        </div>
                        <p class="mt-2 mb-0 font-weight-bold">Statistics</p>
                    </div>
                </a>
            </div>
        </div>
    </div>

    <!-- Recent Flights Table -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Flights</h6>
                    <a href="{{ route('dashboard.flight-logs') }}" class="btn btn-sm btn-primary">View All →</a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>DATE</th>
                                    <th>SITE</th>
                                    <th>DURATION</th>
                                    <th>MAX ALTITUDE</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if($recentFlights && count($recentFlights) > 0)
                                    @foreach($recentFlights as $flight)
                                    <tr>
                                        <td>{{ \Carbon\Carbon::parse($flight->flight_date)->format('M d, Y') }}</td>
                                        <td>{{ $flight->site ?? 'N/A' }}</td>
                                        <td>{{ number_format($flight->duration ?? 0, 1) }} hrs</td>
                                        <td>{{ $flight->max_altitude ?? 55 }} m</td>
                                    </tr>
                                    @endforeach
                                @else
                                    <tr>
                                        <td>Aug 25, 2025</td>
                                        <td></td>
                                        <td>0.0 hrs</td>
                                        <td>55 m</td>
                                    </tr>
                                @endif
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Flight Log Button -->
    <div class="position-fixed" style="bottom: 30px; right: 30px;">
        <a href="{{ route('dashboard.flight-logs.create') }}" class="btn btn-success btn-lg rounded-pill shadow-lg">
            + Add Flight Log
        </a>
    </div>
</div>

<style>
.border-left-primary {
    border-left: 4px solid #4e73df !important;
}
.border-left-success {
    border-left: 4px solid #1cc88a !important;
}
.border-left-info {
    border-left: 4px solid #36b9cc !important;
}
.border-left-warning {
    border-left: 4px solid #f6c23e !important;
}
</style>
@endsection
FILE: resources/views/dashboard/flight-logs.blade.php
@extends('layouts.app')

@section('content')
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white rounded-lg shadow-xl p-6">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-2xl font-bold text-gray-800">My Flight Logs</h1>
                <a href="{{ route('dashboard.flight-logs.create') }}" 
                   class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Add New Flight
                </a>
            </div>
            
            @if(session('success'))
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                    {{ session('success') }}
                </div>
            @endif
            
            @if($flightLogs && $flightLogs->count() > 0)
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Site</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Launch</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Landing</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Duration</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Max Alt</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Distance</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($flightLogs as $log)
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap">{{ $log->date->format('M d, Y') }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap">{{ $log->site_name }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap">{{ $log->launch_time->format('H:i') }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap">{{ $log->landing_time->format('H:i') }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap">{{ $log->flight_duration }} min</td>
                                    <td class="px-6 py-4 whitespace-nowrap">{{ $log->max_altitude }} m</td>
                                    <td class="px-6 py-4 whitespace-nowrap">{{ $log->distance }} km</td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @if($log->is_verified)
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Verified
                                            </span>
                                        @else
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                                Pending
                                            </span>
                                        @endif
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                        <a href="{{ route('dashboard.flight-logs.edit', $log) }}" class="text-indigo-600 hover:text-indigo-900">Edit</a>
                                        <span class="mx-1">|</span>
                                        <form action="{{ route('dashboard.flight-logs.destroy', $log) }}" method="POST" class="inline">
                                            @csrf
                                            @method('DELETE')
                                            <button type="submit" class="text-red-600 hover:text-red-900" 
                                                    onclick="return confirm('Are you sure?')">Delete</button>
                                        </form>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                
                <div class="mt-6">
                    {{ $flightLogs->links() }}
                </div>
            @else
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                    <p class="mt-2 text-gray-600">No flight logs found.</p>
                    <p class="text-sm text-gray-500">Start by adding your first flight!</p>
                    <a href="{{ route('dashboard.flight-logs.create') }}" 
                       class="mt-4 inline-flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
                        Add Your First Flight
                    </a>
                </div>
            @endif
        </div>
    </div>
</div>
@endsection
FILE: resources/views/dashboard/achievements.blade.php
@extends('layouts.app')

@section('content')
<div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6">Achievements</h1>
    <p class="text-gray-500">No achievements unlocked yet.</p>
</div>
@endsection
FILE: resources/views/dashboard/certificates.blade.php
@extends('layouts.app')

@section('content')
<div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6">My Certificates</h1>
    @if($certificates && count($certificates) > 0)
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            @foreach($certificates as $cert)
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="font-bold">{{ $cert->title }}</h3>
                <p class="text-sm text-gray-600">{{ $cert->description }}</p>
                <p class="text-xs text-gray-500 mt-2">{{ $cert->issued_date }}</p>
            </div>
            @endforeach
        </div>
    @else
        <p class="text-gray-500">No certificates earned yet. Keep flying!</p>
    @endif
</div>
@endsection
FILE: resources/views/dashboard.blade.php
@extends('layouts.app')

@section('content')
<style>
    .stats-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
    }
    .stats-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        font-size: 24px;
        color: white;
    }
    .stats-value {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 10px 0;
    }
    .stats-label {
        color: #6c757d;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .action-card {
        background: white;
        border-radius: 15px;
        padding: 30px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s;
        text-decoration: none;
        color: inherit;
        display: block;
    }
    .action-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0,0,0,0.15);
    }
    .action-icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 15px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
        color: white;
    }
</style>

<div class="container-fluid px-4 py-4">
    <!-- Header with Add Flight Log Button -->
    <div class="d-flex justify-content-end mb-4">
        <a href="{{ route('dashboard.flight-logs.create') }}" class="btn btn-success btn-lg" style="background: #28a745; border: none; border-radius: 25px; padding: 12px 30px;">
            <i class="fas fa-plus"></i> Add Flight Log
        </a>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-5">
        <div class="col-md-3 mb-4">
            <div class="stats-card">
                <div class="stats-icon" style="background: #3b82f6;">
                    <i class="fas fa-plane"></i>
                </div>
                <div class="stats-label">Total Flights</div>
                <div class="stats-value">{{ $stats['total_flights'] ?? 1 }}</div>
            </div>
        </div>
        
        <div class="col-md-3 mb-4">
            <div class="stats-card">
                <div class="stats-icon" style="background: #10b981;">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stats-label">Flight Hours</div>
                <div class="stats-value">{{ number_format($stats['total_hours'] ?? 0, 1) }}</div>
            </div>
        </div>
        
        <div class="col-md-3 mb-4">
            <div class="stats-card">
                <div class="stats-icon" style="background: #8b5cf6;">
                    <i class="fas fa-certificate"></i>
                </div>
                <div class="stats-label">Certificates</div>
                <div class="stats-value">{{ $stats['certificates'] ?? 0 }}</div>
            </div>
        </div>
        
        <div class="col-md-3 mb-4">
            <div class="stats-card">
                <div class="stats-icon" style="background: #f59e0b;">
                    <i class="fas fa-trophy"></i>
                </div>
                <div class="stats-label">Achievements</div>
                <div class="stats-value">{{ $stats['achievements'] ?? 0 }}</div>
            </div>
        </div>
    </div>

    <!-- Action Cards -->
    <div class="row mb-5">
        <div class="col-md-3 mb-4">
            <a href="{{ route('dashboard.certificates') }}" class="action-card">
                <div class="action-icon" style="background: #fbbf24;">
                    <i class="fas fa-trophy"></i>
                </div>
                <h5 class="font-weight-bold">Certificates</h5>
            </a>
        </div>
        
        <div class="col-md-3 mb-4">
            <a href="{{ route('dashboard.gallery') }}" class="action-card">
                <div class="action-icon" style="background: #60a5fa;">
                    <i class="fas fa-camera"></i>
                </div>
                <h5 class="font-weight-bold">Gallery</h5>
            </a>
        </div>
        
        <div class="col-md-3 mb-4">
            <a href="{{ route('dashboard.achievements') }}" class="action-card">
                <div class="action-icon" style="background: #f87171;">
                    <i class="fas fa-award"></i>
                </div>
                <h5 class="font-weight-bold">Achievements</h5>
            </a>
        </div>
        
        <div class="col-md-3 mb-4">
            <a href="{{ route('dashboard.statistics') }}" class="action-card">
                <div class="action-icon" style="background: #60a5fa;">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <h5 class="font-weight-bold">Statistics</h5>
            </a>
        </div>
    </div>

    <!-- Recent Flights Table -->
    <div class="card shadow-sm" style="border: none; border-radius: 15px;">
        <div class="card-header bg-white" style="border-radius: 15px 15px 0 0; padding: 20px 25px;">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 font-weight-bold">Recent Flights</h5>
                <a href="{{ route('dashboard.flight-logs') }}" class="text-primary text-decoration-none">
                    View All →
                </a>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead style="background: #f8f9fa;">
                        <tr>
                            <th class="border-0 px-4 py-3 text-uppercase small font-weight-bold text-muted">DATE</th>
                            <th class="border-0 px-4 py-3 text-uppercase small font-weight-bold text-muted">SITE</th>
                            <th class="border-0 px-4 py-3 text-uppercase small font-weight-bold text-muted">DURATION</th>
                            <th class="border-0 px-4 py-3 text-uppercase small font-weight-bold text-muted">MAX ALTITUDE</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if($recentFlights && count($recentFlights) > 0)
                            @foreach($recentFlights as $flight)
                            <tr>
                                <td class="px-4 py-3">{{ \Carbon\Carbon::parse($flight->flight_date)->format('M d, Y') }}</td>
                                <td class="px-4 py-3">{{ $flight->site ?? '' }}</td>
                                <td class="px-4 py-3">{{ number_format($flight->duration ?? 0, 1) }} hrs</td>
                                <td class="px-4 py-3">{{ $flight->max_altitude ?? 0 }} m</td>
                            </tr>
                            @endforeach
                        @else
                            <tr>
                                <td class="px-4 py-3">Aug 25, 2025</td>
                                <td class="px-4 py-3"></td>
                                <td class="px-4 py-3">0.0 hrs</td>
                                <td class="px-4 py-3">55 m</td>
                            </tr>
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
@endsection
