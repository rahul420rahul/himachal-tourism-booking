<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\Booking;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Razorpay\Api\Api;

class PaymentController extends Controller
{
    private $razorpay;

    public function __construct()
    {
        $this->razorpay = new Api(env('RAZORPAY_KEY'), env('RAZORPAY_SECRET'));
    }

    public function createOrder(Request $request)
    {
        try {
            Log::info('Creating Razorpay order', ['booking_id' => $request->booking_id]);
            
            $booking = Booking::with('package')->findOrFail($request->booking_id);
            
            // Verify user owns this booking
            if ($booking->user_id !== auth()->id()) {
                throw new \Exception('Unauthorized access to booking');
            }
            
            // Create Razorpay order
            $orderData = [
                'amount' => $booking->final_amount * 100, // Amount in paise
                'currency' => 'INR',
                'receipt' => 'booking_' . $booking->id,
                'notes' => [
                    'booking_id' => $booking->id,
                    'booking_number' => $booking->booking_number,
                    'package_name' => $booking->package->name,
                    'user_id' => $booking->user_id
                ]
            ];
            
            Log::info('Razorpay order data', $orderData);
            
            $order = $this->razorpay->order->create($orderData);
            
            Log::info('Razorpay order created', ['order_id' => $order->id]);

            // Try to store order details in database (if Payment model exists)
            try {
                if (class_exists(\App\Models\Payment::class)) {
                    Payment::create([
                        'booking_id' => $booking->id,
                        'razorpay_order_id' => $order->id,
                        'amount' => $booking->final_amount,
                        'currency' => 'INR',
                        'status' => 'created'
                    ]);
                }
            } catch (\Exception $e) {
                Log::warning('Could not create payment record', ['error' => $e->getMessage()]);
            }

            // Get customer details from participant_details
            $participantDetails = $booking->participant_details ?? [];
            
            $response = [
                'success' => true,
                'order_id' => $order->id,
                'amount' => $booking->final_amount * 100,
                'currency' => 'INR',
                'key' => env('RAZORPAY_KEY'),
                'name' => 'MyBirBilling',
                'description' => $booking->package->name . ' - ' . $booking->booking_number,
                'prefill' => [
                    'name' => $participantDetails['customer_name'] ?? '',
                    'email' => $participantDetails['customer_email'] ?? '',
                    'contact' => $participantDetails['customer_phone'] ?? ''
                ],
                'theme' => [
                    'color' => '#3B82F6'
                ]
            ];
            
            Log::info('Sending payment order response', ['order_id' => $order->id]);
            
            return response()->json($response);

        } catch (\Exception $e) {
            Log::error('Payment order creation error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'booking_id' => $request->booking_id ?? 'N/A'
            ]);
            
            return response()->json([
                'success' => false,
                'message' => 'Failed to create payment order: ' . $e->getMessage()
            ], 500);
        }
    }

    public function handleCallback(Request $request)
    {
        try {
            Log::info('Payment callback received', $request->all());
            
            $razorpayOrderId = $request->razorpay_order_id;
            $razorpayPaymentId = $request->razorpay_payment_id;
            $razorpaySignature = $request->razorpay_signature;

            if (!$razorpayOrderId || !$razorpayPaymentId || !$razorpaySignature) {
                throw new \Exception('Missing required payment parameters');
            }

            // Verify signature
            $attributes = [
                'razorpay_order_id' => $razorpayOrderId,
                'razorpay_payment_id' => $razorpayPaymentId,
                'razorpay_signature' => $razorpaySignature
            ];

            $this->razorpay->utility->verifyPaymentSignature($attributes);
            
            Log::info('Payment signature verified successfully');

            // Find booking by order_id (extract booking_id from receipt)
            try {
                $order = $this->razorpay->order->fetch($razorpayOrderId);
                $bookingId = str_replace('booking_', '', $order->receipt);
                
                $booking = Booking::findOrFail($bookingId);
                
                // Verify user owns this booking
                if ($booking->user_id !== auth()->id()) {
                    throw new \Exception('Unauthorized access to booking');
                }
                
            } catch (\Exception $e) {
                Log::error('Could not fetch order or booking', ['error' => $e->getMessage()]);
                throw new \Exception('Invalid booking or order');
            }

            // Update payment record if exists
            try {
                if (class_exists(\App\Models\Payment::class)) {
                    $payment = Payment::where('razorpay_order_id', $razorpayOrderId)->first();
                    if ($payment) {
                        $payment->update([
                            'razorpay_payment_id' => $razorpayPaymentId,
                            'razorpay_signature' => $razorpaySignature,
                            'status' => 'completed',
                            'paid_at' => now()
                        ]);
                        Log::info('Payment record updated');
                    }
                }
            } catch (\Exception $e) {
                Log::warning('Could not update payment record', ['error' => $e->getMessage()]);
            }

            // Update booking status
            $booking->update([
                'status' => 'confirmed',
                'booking_status' => 'confirmed',
                'payment_status' => 'paid'
            ]);
            
            Log::info('Booking status updated to confirmed', ['booking_id' => $booking->id]);

            return redirect()->route('bookings.my')->with('success', 
                'Payment successful! Your booking ' . $booking->booking_number . ' is confirmed.');

        } catch (\Exception $e) {
            Log::error('Payment verification error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'request_data' => $request->all()
            ]);
            
            return redirect()->route('bookings.my')->with('error', 
                'Payment verification failed. Please contact support if amount was deducted.');
        }
    }

    public function verifyPayment(Request $request)
    {
        try {
            $razorpayOrderId = $request->razorpay_order_id;
            $razorpayPaymentId = $request->razorpay_payment_id;
            $razorpaySignature = $request->razorpay_signature;

            // Verify signature
            $attributes = [
                'razorpay_order_id' => $razorpayOrderId,
                'razorpay_payment_id' => $razorpayPaymentId,
                'razorpay_signature' => $razorpaySignature
            ];

            $this->razorpay->utility->verifyPaymentSignature($attributes);

            return response()->json([
                'success' => true,
                'message' => 'Payment verified successfully'
            ]);

        } catch (\Exception $e) {
            Log::error('Payment verification error', [
                'error' => $e->getMessage(),
                'request_data' => $request->all()
            ]);
            
            return response()->json([
                'success' => false,
                'message' => 'Payment verification failed'
            ], 500);
        }
    }
}
