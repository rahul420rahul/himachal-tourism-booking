<?php

namespace App\Http\Controllers;

use App\Models\Booking;
use App\Models\Package;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class BookingController extends Controller
{
    public function store(Request $request)
    {
        try {
            // Debug: Log incoming request
            Log::info('Booking Request Data: ', $request->all());
            
            // Validation
            $validated = $request->validate([
                'package_id' => 'required|exists:packages,id',
                'travel_date' => 'required|date|after:today',
                'participants' => 'required|integer|min:1',
                'name' => 'required|string|max:255',
                'email' => 'required|email',
                'phone' => 'required|string|max:20',
                'special_requests' => 'nullable|string'
            ]);

            Log::info('Validation passed');

            // Get package details
            $package = Package::findOrFail($validated['package_id']);
            
            // Calculate total amount
            $totalAmount = $package->price * $validated['participants'];

            // Create booking
            $booking = Booking::create([
                'user_id' => Auth::id(),
                'package_id' => $validated['package_id'],
                'travel_date' => $validated['travel_date'],
                'participants' => $validated['participants'],
                'total_amount' => $totalAmount,
                'final_amount' => $totalAmount,
                'status' => 'pending',
                'customer_name' => $validated['name'],
                'customer_email' => $validated['email'],
                'customer_phone' => $validated['phone'],
                'special_requests' => $validated['special_requests'] ?? null,
            ]);

            Log::info('Booking created: ', ['booking_id' => $booking->id]);

            if ($request->ajax()) {
                return response()->json([
                    'success' => true,
                    'message' => 'Booking created successfully!',
                    'booking_id' => $booking->id
                ]);
            }

            return redirect()->route('bookings.show', $booking)
                           ->with('success', 'Booking created successfully!');

        } catch (\Illuminate\Validation\ValidationException $e) {
            Log::error('Validation failed: ', $e->errors());
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Validation failed',
                    'errors' => $e->errors()
                ], 422);
            }
            
            return back()->withErrors($e->errors())->withInput();
            
        } catch (\Exception $e) {
            Log::error('Booking creation failed: ' . $e->getMessage());
            Log::error('Stack trace: ' . $e->getTraceAsString());
            
            if ($request->ajax()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Something went wrong. Please try again.'
                ], 500);
            }
            
            return back()->with('error', 'Something went wrong. Please try again.');
        }
    }

    public function show(Booking $booking)
    {
        // Make sure user can only see their own bookings
        if ($booking->user_id !== Auth::id()) {
            abort(403);
        }

        return view('bookings.show', compact('booking'));
    }

    public function myBookings()
    {
        $bookings = Booking::with('package')
                          ->where('user_id', Auth::id())
                          ->orderBy('created_at', 'desc')
                          ->get();

        return view('bookings.my-bookings', compact('bookings'));
    }
}
