<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>Booking System</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="react-booking-root" 
         data-package-id="{{ $selectedPackage->id ?? '' }}"
         data-package-name="{{ $selectedPackage->name ?? '' }}"
         data-package-price="{{ $selectedPackage->price ?? '' }}">
    </div>
    
    <!-- React from CDN -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- React Component -->
    <script type="text/babel">
        const { useState, useEffect } = React;
        
        function BookingApp() {
            // Get package data from HTML attributes
            const rootEl = document.getElementById('react-booking-root');
            const packageId = rootEl.dataset.packageId;
            const packageName = rootEl.dataset.packageName;
            const packagePrice = rootEl.dataset.packagePrice;
            
            // Steps: calendar -> details -> payment
            const [currentStep, setCurrentStep] = useState(packageId ? 'calendar' : 'packages');
            const [selectedDate, setSelectedDate] = useState('');
            const [selectedTime, setSelectedTime] = useState('');
            const [packages, setPackages] = useState([]);
            const [selectedPackage, setSelectedPackage] = useState(
                packageId ? { id: packageId, name: packageName, price: packagePrice } : null
            );
            
            // Generate next 30 days for calendar
            const getDates = () => {
                const dates = [];
                for (let i = 0; i < 30; i++) {
                    const date = new Date();
                    date.setDate(date.getDate() + i);
                    dates.push(date.toISOString().split('T')[0]);
                }
                return dates;
            };
            
            // Time slots
            const timeSlots = [
                '06:00 AM', '07:00 AM', '08:00 AM', '09:00 AM', '10:00 AM',
                '11:00 AM', '03:00 PM', '04:00 PM', '05:00 PM'
            ];
            
            // Load packages if not pre-selected
            useEffect(() => {
                if (!packageId) {
                    fetch('/api/packages')
                        .then(res => res.json())
                        .then(data => setPackages(data.data || []))
                        .catch(err => console.error('Error:', err));
                }
            }, []);
            
            // Package Selection Step
            const PackageSelection = () => (
                <div>
                    <h2 className="text-2xl font-bold mb-4">Select Package</h2>
                    <div className="grid gap-4">
                        {packages.map(pkg => (
                            <div key={pkg.id} className="border rounded p-4 hover:bg-gray-50 cursor-pointer"
                                 onClick={() => {
                                     setSelectedPackage(pkg);
                                     setCurrentStep('calendar');
                                 }}>
                                <h3 className="font-bold">{pkg.name}</h3>
                                <p>Price: ₹{pkg.price}</p>
                            </div>
                        ))}
                    </div>
                </div>
            );
            
            // Calendar Step
            const CalendarStep = () => (
                <div>
                    <h2 className="text-2xl font-bold mb-2">Select Date & Time</h2>
                    <p className="mb-4 text-gray-600">Package: {selectedPackage?.name} - ₹{selectedPackage?.price}</p>
                    
                    <div className="mb-6">
                        <label className="block mb-2 font-semibold">Select Date:</label>
                        <select 
                            value={selectedDate} 
                            onChange={(e) => setSelectedDate(e.target.value)}
                            className="w-full border rounded px-4 py-2"
                        >
                            <option value="">Choose a date</option>
                            {getDates().map(date => (
                                <option key={date} value={date}>
                                    {new Date(date).toLocaleDateString('en-IN', { 
                                        weekday: 'short', 
                                        day: 'numeric', 
                                        month: 'short' 
                                    })}
                                </option>
                            ))}
                        </select>
                    </div>
                    
                    {selectedDate && (
                        <div className="mb-6">
                            <label className="block mb-2 font-semibold">Select Time:</label>
                            <div className="grid grid-cols-3 gap-2">
                                {timeSlots.map(time => (
                                    <button
                                        key={time}
                                        onClick={() => setSelectedTime(time)}
                                        className={`px-4 py-2 border rounded ${
                                            selectedTime === time 
                                                ? 'bg-blue-500 text-white' 
                                                : 'hover:bg-gray-100'
                                        }`}
                                    >
                                        {time}
                                    </button>
                                ))}
                            </div>
                        </div>
                    )}
                    
                    <div className="flex gap-4">
                        {!packageId && (
                            <button 
                                onClick={() => setCurrentStep('packages')}
                                className="px-6 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                            >
                                Back
                            </button>
                        )}
                        <button 
                            onClick={() => selectedDate && selectedTime && setCurrentStep('details')}
                            disabled={!selectedDate || !selectedTime}
                            className={`px-6 py-2 rounded ${
                                selectedDate && selectedTime
                                    ? 'bg-blue-500 text-white hover:bg-blue-600' 
                                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                            }`}
                        >
                            Next: Personal Details
                        </button>
                    </div>
                </div>
            );
            
            // Personal Details Step
            const DetailsStep = () => {
                const [formData, setFormData] = useState({
                    name: '',
                    email: '',
                    phone: '',
                    participants: 1
                });
                
                const handleSubmit = (e) => {
                    e.preventDefault();
                    // Store all data and proceed to payment
                    const bookingData = {
                        package: selectedPackage,
                        date: selectedDate,
                        time: selectedTime,
                        ...formData
                    };
                    console.log('Booking Data:', bookingData);
                    
                    // Here you would normally submit to backend
                    // For now, just show alert
                    alert('Proceeding to payment...');
                    
                    // Redirect to payment or handle payment
                    // window.location.href = '/payment';
                };
                
                return (
                    <div>
                        <h2 className="text-2xl font-bold mb-4">Personal Details</h2>
                        <div className="mb-4 p-4 bg-gray-50 rounded">
                            <p><strong>Package:</strong> {selectedPackage?.name}</p>
                            <p><strong>Date:</strong> {selectedDate}</p>
                            <p><strong>Time:</strong> {selectedTime}</p>
                            <p><strong>Price:</strong> ₹{selectedPackage?.price}</p>
                        </div>
                        
                        <form onSubmit={handleSubmit}>
                            <div className="mb-4">
                                <label className="block mb-2">Name*</label>
                                <input
                                    type="text"
                                    required
                                    value={formData.name}
                                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                                    className="w-full border rounded px-4 py-2"
                                />
                            </div>
                            
                            <div className="mb-4">
                                <label className="block mb-2">Email*</label>
                                <input
                                    type="email"
                                    required
                                    value={formData.email}
                                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                                    className="w-full border rounded px-4 py-2"
                                />
                            </div>
                            
                            <div className="mb-4">
                                <label className="block mb-2">Phone*</label>
                                <input
                                    type="tel"
                                    required
                                    pattern="[0-9]{10}"
                                    value={formData.phone}
                                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                                    className="w-full border rounded px-4 py-2"
                                />
                            </div>
                            
                            <div className="mb-4">
                                <label className="block mb-2">Number of Participants*</label>
                                <input
                                    type="number"
                                    min="1"
                                    max="10"
                                    required
                                    value={formData.participants}
                                    onChange={(e) => setFormData({...formData, participants: e.target.value})}
                                    className="w-full border rounded px-4 py-2"
                                />
                            </div>
                            
                            <div className="flex gap-4">
                                <button 
                                    type="button"
                                    onClick={() => setCurrentStep('calendar')}
                                    className="px-6 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                                >
                                    Back
                                </button>
                                <button 
                                    type="submit"
                                    className="px-6 py-2 bg-green-500 text-white rounded hover:bg-green-600"
                                >
                                    Proceed to Payment
                                </button>
                            </div>
                        </form>
                    </div>
                );
            };
            
            return (
                <div className="min-h-screen bg-gray-100 py-8">
                    <div className="container mx-auto max-w-2xl bg-white rounded-lg shadow p-8">
                        <h1 className="text-3xl font-bold mb-8 text-center">Booking System</h1>
                        
                        {currentStep === 'packages' && <PackageSelection />}
                        {currentStep === 'calendar' && <CalendarStep />}
                        {currentStep === 'details' && <DetailsStep />}
                    </div>
                </div>
            );
        }
        
        // Render the app
        const root = ReactDOM.createRoot(document.getElementById('react-booking-root'));
        root.render(<BookingApp />);
    </script>
</body>
</html>

<!-- Add before closing </body> tag -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    window.RAZORPAY_KEY = "{{ config('services.razorpay.key') }}";
</script>
